#! /bin/sh
##
## test-template_test --
##
##   Test script for test-template executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
. /etc/profile
test -n "$DOMAIN" || DOMAIN=xcluster
test -n "$PREFIX" || PREFIX=1000::1
yamld=/etc/kubernetes/test-template

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_check_namespaces() {
	test_namespaces
}
cmd_tcase_check_nodes() {
	test_nodes
}
cmd_tcase_start_servers() {
	$kubectl apply -f /etc/kubernetes/alpine.yaml || tdie
	apply_k8s /etc/kubernetes/mconnect
	if ipv6base; then
		assign-lb-ip -svc mconnect-lb -ip 1000::
	else
		assign-lb-ip -svc mconnect-lb -ip 10.0.0.0
	fi

	assign-lb-ip -svc mconnect-ipv4 || tdie
	assign-lb-ip -svc mconnect-ipv6 || tdie
	assign-lb-ip -svc mconnect-preferdual -ip 1000::2,10.0.0.2
}
cmd_tcase_check_servers() {
	test_deployment alpine-deployment 120
	test_daemonset mconnect 120
	test_deployment mconnect-deployment 120
}
cmd_tcase_nslookup() {
	tcase "Nslookup $1"
	test -n "$1" || tdie "Nothing to lookup"
	pushv 40 20 2
	tex "nslookup $1 | ogrep 'Name:'" || tdie
	popv
}
mconnect_to() {
	tlog "Traffic to $1"
	tex do_mconnect $1 || tdie
}
cmd_tcase_set_vip_routes() {
	tcase "Set routes to the VIP (ECMP)"
	vip_route
}
cmd_tcase_internal_mconnect() {
	tcase "Internal connect"
	mconnect_to mconnect.default.svc.$DOMAIN:5001
	mconnect_to mconnect-ipv4.default.svc.$DOMAIN
	mconnect_to mconnect-ipv6.default.svc.$DOMAIN
	mconnect_to mconnect-preferdual.default.svc.$DOMAIN:5001
}
cmd_tcase_external_mconnect() {
	tcase "External connect"
	if ipv6base; then
		mconnect_to "[1000::]:5001"
	else
		mconnect_to "10.0.0.0:5001"
	fi
	mconnect_to "[1000::1]:5001"
	mconnect_to "10.0.0.1:5001"
	mconnect_to "[1000::2]:5001"
	mconnect_to "10.0.0.2:5001"
}

get_global_addresses() {
	$kubectl exec $1 -- ip addr show dev eth0 | grep 'scope global' | sed -E 's,.*inet.? ([^ ]+) .*,\1,' | tr '\n' ' '
}

cmd_tcase_check_pod_addresses() {
	tcase "Check POD addresses for; $__mode"
	local adr found=0
	local pod=$(get_pod alpine)
	test -n "$pod" || tdie "Can't find an alpine POD"
	local adrs=$(get_global_addresses $pod)
	tlog "Addresses in $pod [$adrs]"
	for adr in $adrs; do
		if echo $adr | grep -q : ; then
			found=$((found+100))
		else
			found=$((found+1))
		fi
	done
	test $found -eq 101 || tdie "Invalid adr for $_mode; $adrs"

	adr=$($kubectl get pod $pod -o json | jq -r .status.podIP)
	if ipv6base; then
		echo $adr | grep -q : || tlog "IGNORED:podIP has wrong family in [$pod]"
	else
		echo $adr | grep -q : && tdie "podIP has wrong family in [$pod]"
	fi
	return 0
}

cmd_tcase_pod_nslookup() {
	tcase "Nslookup from PODs"
	local n pod
	for n in $($kubectl get nodes -o json | jq -r '.items[].metadata.name'); do
		pod=$(get_pod app=alpine $n)
		echo $pod | grep -q alpine || continue
		tlog "Nslookup from a POD on $n"
		$kubectl exec $pod -- nslookup kubernetes 2>&1 \
			| ogrep -E 'fd00:4000::1|12.0.0.1' || tdie
	done
	test -n "$pod" || tdie "No PODs (or nodes) were found"
}

cmd_tcase_outgoing_connect() {
	local ips="192.168.1.201 [$PREFIX:192.168.1.201]"
	test "$__mode" = "ipv4" && ips="192.168.1.201"
	test "$__mode" = "ipv6" && ips="[$PREFIX:192.168.1.201]"
	tcase "Outgoing connect to; $ips"
	local ip
	for ip in $ips; do
		tex kubectl_exec app=alpine -- ping -c1 -W1 $ip || tdie "Ping $ip"
		kubectl_exec app=alpine -- wget -qO- http://$ip/cgi-bin/info \
			| ogrep vm-201 || tdie "http://$ip/cgi-bin/info"
	done
}

. /etc/profile
. /usr/lib/xctest
indent='  '


# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
