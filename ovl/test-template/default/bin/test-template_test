#! /bin/sh
##
## test-template_test --
##
##   Test script for test-template executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
test -n "$__cname" || __cname=xcluster

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_check_namespaces() {
	test_namespaces
}
cmd_tcase_check_nodes() {
	test_nodes
}
cmd_tcase_check_coredns() {
	test_coredns
}
cmd_tcase_check_metric_server() {
	kubectl="kubectl -n kube-system"
	test_deployment metrics-server 180
}
cmd_tcase_start_mconnect() {
	if test "$1" = "dual-stack"; then
		start_mconnect /etc/kubernetes/mconnect-dual.yaml || tdie
		assign-lb-ip -svc mconnect-ipv4 || tdie
		assign-lb-ip -svc mconnect-ipv6 || tdie
	else
		start_mconnect /etc/kubernetes/mconnect.yaml || tdie
		local adr=10.0.0.0
		test "$1" = "ipv6" && adr=1000::
		assign-lb-ip -svc mconnect -ip $adr || tdie
	fi
}
cmd_tcase_nslookup() {
	tcase "Nslookup $1"
	test -n "$1" || tdie "Nothing to lookup"
	pushv 40 20 2
	tex "nslookup $1 | ogrep 'Name:'" || tdie
	popv
}
cmd_tcase_internal_mconnect() {
	local adr
	pushv 40 20 2
	if test "$1" = "dual-stack"; then
		adr=mconnect-ipv4.default.svc.$__cname
		tcase "Traffic to $adr"
		tex "do_mconnect $adr" || tdie
		adr=mconnect-ipv6.default.svc.$__cname
		tcase "Traffic to $adr"
		tex "do_mconnect $adr" || tdie
	else
		local adr=mconnect.default.svc.$__cname
		tcase "Traffic to $adr"
		tex do_mconnect $adr || tdie
	fi
	popv
}
cmd_tcase_set_vip_routes() {
	tcase "Set routes to the VIP address via vm-002"
	ip ro replace 10.0.0.0/24 via 192.168.1.2 || tdie
	ip -6 ro replace 1000::/120 via 1000::1:192.168.1.2 || tdie
}
cmd_tcase_external_mconnect() {
	local adr=10.0.0.0
	test "$1" = "ipv6" && adr='[1000::]'
	tcase "External traffic to $adr"
	tex "do_mconnect $adr" || tdie
}

cmd_tcase_start_alpine() {
	tcase "Start alpine pods"
	$kubectl apply -f /etc/kubernetes/alpine.yaml || tdie
}
cmd_tcase_check_alpine() {
	test_deployment alpine-deployment 40
}

get_global_addresses() {
	$kubectl exec $1 -- ip addr show dev eth0 | grep 'scope global' | sed -E 's,.*inet.? ([^ ]+) .*,\1,' | tr '\n' ' '
}

cmd_tcase_check_pod_addresses() {
	tcase "Check POD addresses for; $1"
	local adr found=0
	local pod=$(get_pod alpine)
	test -n "$pod" || tdie "Can't find an alpine POD"
	local adrs=$(get_global_addresses $pod)
	tlog "POD addresses [$adrs]"
	for adr in $adrs; do
		if echo $adr | grep -q : ; then
			found=$((found+100))
		else
			found=$((found+1))
		fi
	done
	case $1 in
		ipv4) test $found -eq 1 || tdie "Invalid adr for $1; $adrs";;
		ipv6) test $found -eq 100 || tdie "Invalid adr for $1; $adrs";;
		*) test $found -eq 101 || tdie "Invalid adr for $1; $adrs";;
	esac
}

cmd_tcase_pod_nslookup() {
	tcase "Nslookup from PODs"
	local n pod
	for n in $($kubectl get nodes -o json | jq -r '.items[].metadata.name'); do
		pod=$(get_pod app=alpine $n)
		echo $pod | grep -q alpine || continue
		tlog "Nslookup from a POD on $n"
		$kubectl exec $pod -- nslookup kubernetes 2>&1 || tdie
	done
	test -n "$pod" || tdie "No PODs (or nodes) were found"
}

. /etc/profile
. /usr/lib/xctest
indent='  '


# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
