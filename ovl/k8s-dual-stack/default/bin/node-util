#! /bin/sh
##
## node-util --
##
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
tmp=/tmp/${prg}_$$

die() {
    echo "ERROR: $*" >&2
    rm -rf $tmp
    exit 1
}
help() {
    grep '^##' $0 | cut -c3-
    rm -rf $tmp
    exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	test -n "$__log_file" || return 0
	echo "$prg $(date +%T): $*" >> "$__log_file"
	return 0
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

##  env
##    Print environment.
##
cmd_env() {
	test -n "$__info_file" || __info_file=/tmp/node-info
	test "$cmd" = "env" && set | grep -E '^(__.*)='
}

##  info
##    Print a json array with name, address and podCIDR for all nodes
##
cmd_info() {
	kubectl -o json get nodes | jq '[.items[]|{name: .metadata.name,podCIDR: .spec.podCIDR, address: .status.addresses[]|select(.type == "InternalIP").address}]|sort_by(.name)'
}

##  check_info [--info-file=/tmp/node-info]
##    Read info and returns ok (0) if the info is updated
##
cmd_check_info() {
	cmd_env

	mkdir -p $tmp
	if ! cmd_info > $tmp/node-info; then
		log "Failed to read node-info"
		rm -f $tmp/node-info
		return 0
	fi

	if ! test -r "$__info_file"; then
		log "First node-info read"
		cp $tmp/node-info "$__info_file"
		return 0
	fi
	
	if ! diff -q "$__info_file" $tmp/node-info > /dev/null; then
		log "Node-info updated"
		cp $tmp/node-info "$__info_file"
		return 0
	fi

	log "Node-info NOT updated"
	return 1
}

##  check_routes
##    Check routes to podCIDR's, update if needed.
##
cmd_check_routes() {
	cmd_check_info || return 0
	cmd_update_routes
	return 0      # Must return ok!
}

##  update_routes [--info-file=/tmp/node-info]
##    Update routes to podCIDR's
##
cmd_update_routes() {
	cmd_env
	if ! test -r "$__info_file"; then
		log "Not readable [$__info_file]"
		return 0
	fi

	local n i cidr a h
	h=$(hostname)
	for n in $(cat $__info_file | jq -r '.[].name'); do
		test "$n" = "$h" && continue
		i=$(cat $__info_file | jq ".[]|select(.name == \"$n\")")
		cidr=$(echo $i | jq -r .podCIDR)
		echo $cidr | grep -qi null | continue
		a=$(echo $i | jq -r .address)
		if echo $a | grep -q : ; then
			cmd_x ip -6 ro replace $cidr via $a
		else
			cmd_x ip ro replace $cidr via $a
		fi
	done
}

cmd_x() {
	log "$@"
	test "$__dry_run" = "yes" && return 0
	$@
}

# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 $hook || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
    if echo $1 | grep -q =; then
	o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
	v=$(echo "$1" | cut -d= -f2-)
	eval "$o=\"$v\""
    else
	o=$(echo "$1" | sed -e 's,-,_,g')
	eval "$o=yes"
    fi
    shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
