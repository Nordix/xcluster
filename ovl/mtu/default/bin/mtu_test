#! /bin/sh
##
## mtu_test --
##
##   Test script for mtu executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$

yamld=/etc/kubernetes/mtu
PREFIX=1000::1

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_check_namespaces() {
	test_namespaces
}
cmd_tcase_check_nodes() {
	test_nodes
}

cmd_tcase_tracepath_node() {
	local mtu=1500
	test -n "$1" && mtu=$1
	tcase "Tracepath between nodes, expected mtu=$mtu"
	tracepath 192.168.1.2 2>&1 | ogrep "Resume: pmtu $mtu " || tdie
	tracepath 1000::1:192.168.1.2 2>&1 | ogrep "Resume: pmtu $mtu " || tdie
}

cmd_tcase_tracepath_pod() {
	local mtu=1500
	local l=app=mserver-daemonset
	test -n "$1" && mtu=$1
	tcase "Tracepath between nodes, link-mtu=$mtu"
	local pod1=$(get_pod "$l" vm-002)
	test -n "$pod1" -a "$pod1" != "null" || tdie "Can't find pod on vm-002"
	local pod2=$(get_pod "$l" vm-003)
	test -n "$pod2" -a "$pod2" != "null" || tdie "Can't find pod on vm-003"
	local ip=$($kubectl get pod $pod2 -o json | jq -r '.status.podIPs[0].ip')
	log "Tracepath from $pod1 on vm-002 to $ip on vm-003"
	$kubectl exec $pod1 -- tracepath $ip | ogrep -Eq "Resume: pmtu [0-9]+ " || tdie
	local pmtu=$($kubectl exec $pod1 -- tracepath $ip | grep -oE "Resume: pmtu [0-9]+ " | cut -d' ' -f3)
	log "Pmtu; $pmtu"
	# depending on tunnel-headers the pmtu may be smaller than the link mtu
	local mtuok=$((mtu-20))
	test $pmtu -ge $mtuok || tdie "Too small pmtu; $pmtu"
}

cmd_tcase_start_mserver() {
	tcase "Start mserver pods"
	$kubectl apply -f $yamld/mserver-daemonset.yaml || tdie
	test_daemonset mserver-daemonset 180
}
cmd_tcase_http_svc() {
	tcase "HTTP Service towards mserver"
	$kubectl apply -f $yamld/mserver-http-svc.yaml || tdie
	assign-lb-ip -svc mserver-http-ipv4 -ip 10.0.0.2
	assign-lb-ip -svc mserver-http-ipv6 -ip $PREFIX:10.0.0.2
}
cmd_tcase_mconnect_svc() {
	tcase "Mconnect Service towards mserver"
	$kubectl apply -f $yamld/mserver-mconnect-svc.yaml || tdie
	assign-lb-ip -svc mserver-mconnect-ipv4 -ip 10.0.0.0
	assign-lb-ip -svc mserver-mconnect-ipv6 -ip $PREFIX:10.0.0.0
}
cmd_tcase_backend_vip_route() {
	tcase "Setup VIP routes on frontend network"
	local X=1
	test "$FIRST_WORKER" = "2" && X=5
	ip ro replace 10.0.0.0/24 \
		nexthop via 192.168.3.$X \
		nexthop via 192.168.3.2 \
		nexthop via 192.168.3.3 \
		nexthop via 192.168.3.4
	ip -6 ro replace $PREFIX:10.0.0.0/120 \
		nexthop via $PREFIX:192.168.3.$X \
		nexthop via $PREFIX:192.168.3.2 \
		nexthop via $PREFIX:192.168.3.3 \
		nexthop via $PREFIX:192.168.3.4
	echo 1 > /proc/sys/net/ipv4/fib_multipath_hash_policy
}
cmd_tcase_backend_vip_route_tester() {
	tcase "Setup VIP routes on tester"
	ip ro replace 10.0.0.0/24 via 192.168.2.201
	ip -6 ro replace $PREFIX:10.0.0.0/120 via $PREFIX:192.168.2.201
}
cmd_tcase_backend_http() {
	local adr=10.0.0.2
	test -n "$1" && adr=$1
	test -n "$__count" || __count=1
	tcase "Http to $adr and $PREFIX:$adr ($__count)"
	tex "curl -s --max-time 8 -o /dev/null http://$adr/" || tdie $adr
	tex "curl -s --max-time 8 -o /dev/null http://[$PREFIX:$adr]/" || tdie $PREFIX:$adr
	while test $__count -gt 1; do
		__count=$((__count - 1))
		curl -s --max-time 8 -o /dev/null http://$adr/ || tdie $adr
		curl -s --max-time 8 -o /dev/null http://[$PREFIX:$adr]/ || tdie $PREFIX:$adr
	done
}

cmd_tcase_http_attempt() {
	local adr=10.0.0.2
	test -n "$1" && adr=$1
	test -n "$__count" || __count=1
	tcase "One http attempt to $adr"
	curl -s --max-time 8 -o /dev/null http://$adr/ || tlog FAILED
	return 0
}

cmd_tcase_test_http() {
	local adr=10.0.0.2
	test -n "$1" && adr=$1
	test -n "$__count" || __count=1
	tcase "Test http to $adr and $PREFIX:$adr ($__count)"
	local nfail4=0 nfail6=0
	while test $__count -gt 0; do
		__count=$((__count - 1))
		curl -s --max-time 2 -o /dev/null http://$adr/ || nfail4=$((nfail4 + 1))
		curl -s --max-time 2 -o /dev/null http://[$PREFIX:$adr]/ || nfail6=$((nfail6 + 1))
	done
	tlog "Fail4=$nfail4, fail6=$nfail6"
}

cmd_tcase_mtu() {
	tcase "Setup mtu for eth1/eth2 to [$@]"
	local i
	hostname | grep -Eq 'vm-[0-9]+$' || tdie "Invalid hostname [$(hostname)]"
	i=$(hostname | cut -d- -f2 | sed -re 's,^0+,,')

	local net mtu
	test -n "$1" || return 0
	mtu=$1
	ip link set up dev eth1 mtu $mtu
	ethtool -K eth1 gro off gso off tso off

	test -n "$2" || return 0
	mtu=$2
	ip link set up dev eth2 mtu $mtu
	ethtool -K eth2 gro off gso off tso off
}

cmd_tcase_route() {
	local net=$1 via=$2
	shift
	shift
	tcase "Set route $net/24 via $via ($@)"
	test "$__ipv6" = "yes" || ip ro replace $net/24 via $via $@
	test "$__ipv4" = "yes" || ip -6 ro replace 1000::1:$net/120 via 1000::1:$via $@
	echo 1 > /proc/sys/net/ipv4/ip_forward
	echo 1 > /proc/sys/net/ipv6/conf/all/forwarding
}

cmd_tcase_assign_cidr() {
	tcase "Assign CIDR address to lo [$1]"
	ip addr add $1/24 dev lo
	ip -6 addr add 1000::1:$1/120 dev lo
	ip -6 ro add local 1000::1:$1/120 dev lo
	sysctl -w net.ipv4.ip_nonlocal_bind=1
	sysctl -w net.ipv6.ip_nonlocal_bind=1
}

cmd_tcase_ecmp_route() {
	tcase "Setup ECMP routes to the VIP address via all workers"
	local X=1
	test "$FIRST_WORKER" = "2" && X=5
	ip route add 10.0.0.0/24 \
		nexthop via 192.168.1.$X \
		nexthop via 192.168.1.2 \
		nexthop via 192.168.1.3 \
		nexthop via 192.168.1.4
	ip -6 route add 1000::1:10.0.0.0/120 \
		nexthop via 1000::1:192.168.1.$X \
		nexthop via 1000::1:192.168.1.2 \
		nexthop via 1000::1:192.168.1.3 \
		nexthop via 1000::1:192.168.1.4
	echo 1 > /proc/sys/net/ipv4/fib_multipath_hash_policy
}

cmd_tcase_start_mconnect() {
	tcase "Start an mconnect server"
	mconnect -server -address :5001 > /var/log/mconnect.log 2>&1 &
}

cmd_tcase_mconnect() {
	tcase "Mconnect to [$1]"
	test -n "$1" || tdie 'No address'
	tex do_mconnect "$1" || tdie
}

cmd_tcase_http() {
	test -n "$__nconn" || __nconn=4
	tcase "Http requests ($__nconn) towards [$1]"
	test -n "$1" || tdie "No target"
	local i src
	for i in $(seq 1 $__nconn); do
		if echo $1 | grep -qF '['; then
			src=1000::1:20.0.0.$i
		else
			src=20.0.0.$i
		fi
		tlog "Source-ip; $src"
		curl --max-time 8 -o /dev/null --interface $src $1 2>&1 || tdie
	done
}

cmd_tcase_limit_mtu() {
	tcase "Limit mtus"
	ip -6 ro replace 1000::1:20.0.0.0/120 via 1000::1:192.168.1.201 mtu 1280 \
		|| tdie

	echo 1 > /proc/sys/net/ipv4/ip_no_pmtu_disc
	echo 1 > /proc/sys/net/ipv4/tcp_mtu_probing
	echo 1024 > /proc/sys/net/ipv4/tcp_base_mss
}

cmd_tcase_limit_mtu_2() {
	tcase "Limit mtus to net 192.168.2.0"
	ip -6 ro replace 1000::1:192.168.2.0/120 via 1000::1:192.168.1.201 mtu 1280 \
		|| tdie
	ip ro replace 192.168.2.0/24 via 192.168.1.201 mtu 1280 || tdie
}

cmd_tcase_start_pmtud() {
	tcase "Start pmtud"
	echo 0 > /proc/sys/net/netfilter/nf_conntrack_checksum
	pmtud --iface=eth1 --src-rate=1000.0 --iface-rate=1000.0 --verbose > /var/log/pmtud.log 2>&1 &
}

cmd_tcase_stop_pmtud() {
	tcase "Stop pmtud"
	killall pmtud
	return 0
}

cmd_tcase_start_tcpdump() {
	test -n "$__interface" || __interface=eth1
	tcase "Start tcpdump on $__interface"
	tcpdump -ni $__interface -w /tmp/$__interface.pcap $@ > /dev/null 2>&1 &
}
cmd_tcase_stop_tcpdump() {
	tcase "Stop tcpdump"
	killall tcpdump || tlog "Huh?"
	return 0
}

cmd_tcase_squeeze_chain() {
	local last=5
	test -n "$1" && last=$1
	tcase "Squeeze chain. steps=$last"
	local i j mtu ns
	for i in $(seq 1 $last); do
		mtu=$((1500 - i * 20))
		test $i -eq $last && __last=yes
		cmd_add_chain $i $mtu
	done
	for i in $(seq 1 $last); do
		j=$((i + 1))
		ns=$(printf "sz%02d" $i)
		ip netns exec $ns ip ro add 20.0.0.0/24 via 10.200.$j.2
		ip netns exec $ns ip -6 ro add $PREFIX:20.0.0.0/120 via $PREFIX:10.200.$j.2
	done

	# Force packets from the cluster to the squeeze chain
	iptables -t mangle -A PREROUTING -i eth1 -d 20.0.0.0/24 -j MARK --set-mark 2
	ip ro add default via 10.200.1.2 table 2
	ip rule add fwmark 2 table 2
}

##  add_chain [--last] <index> [mtu]
##    A a netns in the chain
cmd_add_chain() {
	test -n "$1" || die "No index"
	local mtu=1500
	test -n "$2" && mtu=$2
	local i=$1
	local name=$(printf "sz%02d" $i)

	ip netns add $name
	ip link add $name type veth peer name out

	ip link set dev out netns $name
	ip netns exec $name ip link set dev out up mtu $mtu
	ip netns exec $name ip addr add 10.200.$i.2/24 dev out
	ip netns exec $name ip ro add default via 10.200.$i.1
	ip netns exec $name ip -6 addr add $PREFIX:10.200.$i.2/120 dev out
	ip netns exec $name ip -6 ro add default via $PREFIX:10.200.$i.1

	if test $i -eq 1; then
		ip link set dev $name up mtu $mtu
		ip addr add 10.200.$i.1/24 dev $name
		ip -6 addr add $PREFIX:10.200.$i.1/120 dev $name
	else
		local prev=$(printf "sz%02d" $((i - 1)))
		ip link set dev $name netns $prev
		ip netns exec $prev ip link set dev $name up mtu $mtu
		ip netns exec $prev ip addr add 10.200.$i.1/24 dev $name
		ip netns exec $prev ip -6 addr add $PREFIX:10.200.$i.1/120 dev $name
	fi

	if test "$__last" = "yes"; then
		i=$((i + 1))
		ip link add $name type veth peer name host
		ip link set dev $name up
		ip addr add 10.200.$i.2/24 dev $name
		ip -6 addr add $PREFIX:10.200.$i.2/120 dev $name

		ip link set dev host netns $name
		ip netns exec $name ip link set dev host up
		ip netns exec $name ip addr add 10.200.$i.1/24 dev host
		ip netns exec $name ip -6 addr add $PREFIX:10.200.$i.1/120 dev host
	fi
}


. /etc/profile
. /usr/lib/xctest
indent='  '


# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
