#! /bin/sh
##
## nsm_test --
##
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
tmp=/tmp/${prg}_$$
yamld=/etc/kubernetes/nsm-next-gen

die() {
    echo "ERROR: $*" >&2
    rm -rf $tmp
    exit 1
}
help() {
    grep '^##' $0 | cut -c3-
    rm -rf $tmp
    exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

##  env
##    Print environment.
##
cmd_env() {
	test "$cmd" = "env" && set | grep -E '^(__.*|ARCHIVE)='
}

cmd_tcase_check_namespaces() {
	test_namespaces
}
cmd_tcase_check_nodes() {
	test_nodes
}

cmd_tcase_check_nsm() {
	tcase "Check NSM"
	pushv 120 60 2
	tex "npods nsmgr- 4" || tdie
	tex "npods nsm-vpp-forwarder- 4" || tdie
	tex "npods nsm-admission-webhook- 1" || tdie

	# Check that all containers are "ready"
	# If NSM is not ready no interfaces are inserver and no recover
	tex "check_pods_ready app=nsmgr-daemonset" || tdie
	popv
	
}

cmd_tcase_check_icmp_responder() {
	tcase "Check icmp-responder"
	pushv 120 60 2
	tex "npods icmp-responder-nse- 2" || tdie
	tex "npods alpine-nsc- 4" || tdie
	tex "check_pods_ready networkservicemesh.io/app=icmp-responder" || tdie
	tex "check_pods_ready networkservicemesh.io/app=icmp-responder-nsc" || tdie
	popv
	return 0
}

cmd_tcase_bridge_domain_install() {
	tcase "Install bridge-domain"
	$kubectl apply -f /etc/kubernetes/bridge-domain/bridge.yaml || tdie
	tex "npods bridge-domain- 1" || tdie
}

cmd_tcase_bridge_domain_install_mserver() {
	tcase "Install mserver with bridge-domain"
	$kubectl apply -f /etc/kubernetes/mserver-bridge-domain.yaml || tdie
	pushv 120 60 2
	tex "npods mserver-bridge-domain- 4" || tdie
	tex "check_pods_ready app=mserver-bridge-domain" || tdie
	popv
	return 0
}

cmd_tcase_bridge_domain_ping() {
	tcase "Ping via bridge-domain"
	local i p
	p=$(get_pod app=mserver-bridge-domain)
	echo "kubectl exec $p ..."
	for i in 1 2 3 4; do
		$kubectl exec -c mserver $p -- /bin/ping -c 1 -W 1 10.60.1.$i || tdie
	done
	return 0
}

cmd_tcase_bridge_domain_install_simple_client() {
	tcase "Install simple-client with bridge-domain"
	$kubectl apply -f /etc/kubernetes/bridge-domain/simple-client.yaml || tdie
	pushv 120 60 2
	tex "npods simple-client- 3" || tdie
	tex "check_pods_ready networkservicemesh.io/app=simple-client" || tdie
	popv
	return 0
}

cmd_tcase_bridge_domain_ping_simple_client() {
	tcase "Ping via bridge-domain in simple-client"
	local i p
	p=$(get_pod networkservicemesh.io/app=simple-client)
	echo "kubectl exec $p ..."
	for i in 1 2 3 ; do
		$kubectl exec -c alpine-img $p -- /bin/ping -c 1 -W 1 10.60.1.$i || tdie
	done
	return 0
}

cmd_tcase_bridge_domain_install_ipv6() {
	tcase "Install bridge-domain ipv6"
	$kubectl apply -f /etc/kubernetes/bridge-domain/bridge-ipv6.yaml || tdie
	tex "npods bridge-domain- 1" || tdie
}

cmd_tcase_bridge_domain_install_simple_client_ipv6() {
	tcase "Install simple-client with bridge-domain ipv6"
	$kubectl apply -f /etc/kubernetes/bridge-domain/simple-client-ipv6.yaml || tdie
	pushv 120 60 2
	tex "npods simple-client-ipv6- 3" || tdie
	tex "check_pods_ready networkservicemesh.io/app=simple-client-ipv6" || tdie
	popv
	return 0
}

cmd_tcase_bridge_domain_ping_simple_client_ipv6() {
	tcase "Ping via bridge-domain in simple-client ipv6"
	local i p
	p=$(get_pod networkservicemesh.io/app=simple-client-ipv6)
	echo "kubectl exec $p ..."
	for i in 1 2 3 ; do
		$kubectl exec -c alpine-img $p -- /bin/ping -c 1 -W 1 1200::$i || tdie
	done
	return 0
}

# ----------------------------------------------------------------------
# Next-gen
cmd_tcase_vip_routes() {
	tcase "Set VIP routes (ECMP)"
	vip_route
}
cmd_tcase_start_spire() {
	tcase "Start spire"

	$kubectl apply -f $yamld/spire.yaml
	kubectl="kubectl -n spire"
	test_daemonset spire-agent 180
	
	# https://github.com/networkservicemesh/deployments-k8s#how-to-register-nsm-spire-entry
	$kubectl exec spire-server-0 -- \
		/opt/spire/bin/spire-server entry create \
		-spiffeID spiffe://example.org/ns/spire/sa/spire-agent \
		-selector k8s_sat:cluster:nsm-cluster \
		-selector k8s_sat:agent_ns:spire \
		-selector k8s_sat:agent_sa:spire-agent \
		-node || tdie
	$kubectl exec spire-server-0 -- \
		/opt/spire/bin/spire-server entry create \
		-spiffeID spiffe://example.org/ns/nsm-system/sa/default \
		-parentID spiffe://example.org/ns/spire/sa/spire-agent \
		-selector k8s:ns:nsm-system \
		-selector k8s:sa:default || tdie	
	$kubectl exec spire-server-0 -- \
		/opt/spire/bin/spire-server entry create \
		-spiffeID spiffe://example.org/ns/nsm-system/sa/default \
		-parentID spiffe://example.org/ns/spire/sa/spire-agent \
		-selector k8s:ns:default \
		-selector k8s:sa:default || tdie
}

cmd_tcase_start_nsm_next_gen() {
	test -n "$NSM_FORWARDER" || NSM_FORWARDER=vpp
	test -n "$NSM_REGISTRY" || NSM_REGISTRY=memory
	tcase "Start nsm. Forwarder=$NSM_FORWARDER, Registry=$NSM_REGISTRY"
	if test -n "$NSM_FORWARDER_CALLOUT" -a "$NSM_FORWARDER" = "generic"; then
		tlog "FORWARDER_CALLOUT=$NSM_FORWARDER_CALLOUT"
		sed -i -e "s,/bin/forwarder.sh,$NSM_FORWARDER_CALLOUT," $yamld/forwarder-$NSM_FORWARDER.yaml
	fi
	$kubectl apply -f $yamld/registry-$NSM_REGISTRY.yaml
	$kubectl apply -f $yamld/registry-service.yaml
	$kubectl apply -f $yamld/nsmgr.yaml
	$kubectl apply -f $yamld/forwarder-$NSM_FORWARDER.yaml

	test_daemonset nsmgr 120
    test_deployment nsm-registry 30
	test_daemonset forwarder-$NSM_FORWARDER 30
}

cmd_tcase_start_nsc_nse() {
	test -n "$NSM_NSE" || NSM_NSE=icmp-responder
	tcase "Start the nsc and nse-$NSM_NSE"
	$kubectl apply -f $yamld/nse-$NSM_NSE.yaml
	test_deployment nse 60
	$kubectl apply -f $yamld/nsc.yaml
	test_deployment nsc 60
}

cmd_tcase_check_interfaces() {
	tcase "Check injected interfaces"
	mkdir -p $tmp
	local pod iface inet

	pod=$(get_pod app=nsc)
	$kubectl exec $pod -- ifconfig | grep -B1 169.254. > $tmp/nsc || tdie NSC
	iface=$(head -1 $tmp/nsc | cut -d ' ' -f1)
	inet=$(grep -oE '169\.254\.0\.[0-9]+' $tmp/nsc)
	tlog "NSC; $iface, $inet"

	pod=$(get_pod app=nse)
	$kubectl exec $pod -- ifconfig | grep -B1 169.254. > $tmp/nse || tdie NSE
	iface=$(head -1 $tmp/nse | cut -d ' ' -f1)
	inet=$(grep -oE '169\.254\.0\.[0-9]+' $tmp/nse)
	tlog "NSE; $iface, $inet"

	tlog "Ping $inet from NSC"
	kubectl_exec app=nsc ping -c1 -W1 $inet || tdie "Ping nsc->nse"
}

cmd_tcase_start_nsc_nse_ipv6() {
	tcase "Start the nsc and nse for IPv6"
	test "$NSM_NSE" = "generic" || tdie "Generic NSM_NSE must be used"
	sed -i -e 's,169.254.0.0/24,3000::169.254.0.0/120,' $yamld/nse-$NSM_NSE.yaml
	$kubectl apply -f $yamld/nse-$NSM_NSE.yaml
	test_deployment nse 60
	$kubectl apply -f $yamld/nsc.yaml
	test_deployment nsc 60
}

cmd_tcase_start_nsc_nse_l2() {
	tcase "Start the nsc and nse with L2 IPAM"
	test "$NSM_NSE" = "generic" || tdie "Generic NSM_NSE must be used"
	sed -i -e 's,value: "True",value: "False",' $yamld/nse-$NSM_NSE.yaml
	$kubectl apply -f $yamld/nse-$NSM_NSE.yaml
	test_deployment nse 60
	$kubectl apply -f $yamld/nsc-10.yaml
	test_deployment nsc 60
}

cmd_tcase_check_interfaces_ipvlan() {
	tcase "Check IPVLAN interfaces"
	local pod
	for pod in $(kubectl get pods -l app=nsc -o name); do
		kubectl exec $pod -- ip link show nsm-1 || tdie $pod
	done
	pod=$(kubectl get pods -l app=nse -o name | head -1)
	local i
	for i in $(seq 1 10); do
		kubectl exec $pod -- ping -c1 -W1 169.254.0.$i || die "ping 169.254.0.$i"
	done
}

. /etc/profile
test -r /usr/lib/xctest && . /usr/lib/xctest
indent='  '

# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 $hook || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
    if echo $1 | grep -q =; then
	o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
	v=$(echo "$1" | cut -d= -f2-)
	eval "$o=\"$v\""
    else
	o=$(echo "$1" | sed -e 's,-,_,g')
	eval "$o=yes"
    fi
    shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
