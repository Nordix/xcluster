#! /bin/sh
##
## netns_test --
##
##   Test script for netns executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
test -r /etc/profile && . /etc/profile

test -n "$ADRTEMPLATE" || ADRTEMPLATE=172.16.0.0/16/24
test -n "$NPODS" || NPODS=4
test -n "$PREFIX" || PREFIX=1000::1
test -n "$PODIF" || PODIF=eth0
die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

## Test-cases;
##   Used environment variables with defaults;
##     ADRTEMPLATE=172.16.0.0/16/24
##     NPODS=4
##     PODIF=eth0
##     PREFIX=1000::1
##

##   version -- Log version
cmd_tcase_version() {
	log_version
	tlog "ADRTEMPLATE=[$ADRTEMPLATE]"
	tlog "NPODS=[$NPODS]"
	tlog "PODIF=[$PODIF]"
}
##   cni_bridge_configure -- Configure CNI-bridge
cmd_tcase_cni_bridge_configure() {
	tcase "Setup CNI-bridge."
	cmd_cni_bridge_configure
}
##   cni_bridge_start -- Create netns using CNI-bridge
cmd_tcase_cni_bridge_start() {
	tcase "Start PODs with CNI-bridge"
	cmd_create
	cmd_cni_bridge_start
}
##   cni_bridge_ping -- Ping local PODs from main netns
cmd_tcase_cni_bridge_ping() {
	local acount=$(cat /tmp/$(hostname)-ns* | jq -r .ips[].address | wc -l)
	tcase "Ping $acount local netns addresses"
	local a adr
	for a in $(cat /tmp/$(hostname)-ns* | jq -r .ips[].address); do
		#tlog "Ping $a"
		adr=$(echo $a | cut -d/ -f1)
		tex ping -c1 -W1 $adr || tdie "Ping $adr"
	done
}
##   create - Create PODs
cmd_tcase_create() {
	tcase "Create PODs"
	cmd_create
}
##   create_with_addresses - Create PODs and assign addresses
cmd_tcase_create_with_addresses() {
	if test "$RNDADR" = "yes"; then
		tcase "Create PODs and assign random addresses"
		__random=yes
	else
		tcase "Create PODs and assign addresses"
	fi
	cmd_create
	cmd_veth
	cmd_assign_addresses
}
##   forward - Turn on IP forwarding
cmd_tcase_forward() {
	tcase "Turn on IP forwarding"
	echo 1 > /proc/sys/net/ipv4/ip_forward
	echo 1 > /proc/sys/net/ipv4/fib_multipath_hash_policy
	echo 1 > /proc/sys/net/ipv4/conf/all/forwarding
	echo 1 > /proc/sys/net/ipv6/conf/all/forwarding
}
##   linux_bridge - Create a Linux bridge and connect PODs
cmd_tcase_linux_bridge() {
	tcase "Create a Linux bridge and connect PODs"
	test -n "$BR" || BR=br0
	ip link add name $BR type bridge || tdie
	test "$RNDADR" = "yes" && __random=yes
	cmd_assign_bridge_address $BR
	cmd_connect_to_bridge $BR
}
##   bridge_ping -- Ping local PODs from main netns
cmd_tcase_bridge_ping() {
	tcase "Ping local netns addresses"
	local pod adr
	for pod in $(cmd_name); do
		for adr in $(cmd_compute_address $pod | cut -d/ -f1); do
			#tlog "Ping $adr"
			tex ping -c1 -W1 $adr || tdie "Ping $adr"
		done
	done
}
##   attach_eth_to_bridge -- Attach an external interface to the bridge
cmd_tcase_attach_eth_to_bridge() {
	# TODO - Allow to specify the dev
	local dev=eth1
	tcase "Attach [$dev] to bridge"
	test -n "$BR" || BR=br0
	local mynode=$(mynode)
	ip addr flush dev $dev
	ip link set dev $dev master $BR || tdie
	ip addr add 192.168.1.$mynode/24 dev $BR || tdie
	ip -6 addr add $PREFIX:192.168.1.$mynode/24 dev $BR || tdie
}
##   ping_all_random - Ping all random addresses
cmd_tcase_ping_all_random() {
	tcase "Ping all random addresses"
	cmd_ping_all_random
}
##   setup_routes - Setup routing to POD networks between nodes
cmd_tcase_setup_routes() {
	tcase "Setup routing to POD networks on other nodes"
	cmd_setup_routes
}
##   default_route - Setup default routes in PODs
cmd_tcase_default_route() {
	tcase "Setup default routes in PODs"
	__bridge=br0
	cmd_set_default_route
}
##   ping_all_pods - Ping all PODs
cmd_tcase_ping_all_pods() {
	tcase "Ping all PODs"
	cmd_ping_all_pods
}
##   ipvlan - Add ipvlan's to PODs
cmd_tcase_ipvlan() {
	tcase "Add ipvlan's to PODs"
	cmd_add_ipvlan eth1
	__random=yes
	cmd_assign_addresses
	cmd_assign_bridge_address ipvlan-eth1
}


# ----------------------------------------------------------------------
##
## Commands on nodes;

# Netns init command
cmd_init() {
	hostname $1
	ip link set up dev lo
	#nc -p 7777 -lk -e hostname & # NO! Keep-it-simple
}

##   prerequisites
##     Check prerequisites. Only the "ipu" program for now.
cmd_prerequisites() {
	if ! which ipu > /dev/null; then
		cat >&2 <<"EOF"
The "ipu" utility must be included. It is a part of
https://github.com/Nordix/nfqueue-loadbalancer/. Download a
release and set $NFQLBDIR to point to it.
EOF
		die "Missing; ipu"
	fi
}
##   for [count] [first]
##     Emit a sequence of <count> numbers starting with <first>.
##     If <count> is not specified $NPODS is used.
cmd_for() {
	local count=$NPODS
	test -n "$1" && count=$1
	local first=1
	test -n "$2" && first=$2
	local last=$((first + count - 1))
	seq $first $last
}

##   name [count] [first]
##     Print netns names
cmd_name() {
	local n
	for n in $(cmd_for $1 $2); do
		printf "%s-ns%02d\n" $(hostname) $n
	done
}

##   create [count] [first]
##     Create network namespaces
cmd_create() {
	mkdir -p /var/run/utsns
	local name
	for name in $(cmd_name $1 $2); do
		ip netns add $name || die
		touch /var/run/utsns/$name
		unshare --net=/var/run/netns/$name --uts=/var/run/utsns/$name \
			$me init $name
	done
}

##   veth [count] [first]
##     Create veth to PODs. Link is "up" and "dad" disabled
cmd_veth() {
	local name dev=$PODIF
	for name in $(cmd_name $1 $2); do
		ip link add $name type veth peer name host || die
		ip link set netns $name dev host || die
		test "$PODIF" = "hostname" && dev=$name
		ip -n $name link set name $dev dev host
		sysctl -qw net.ipv6.conf.$name.accept_dad=0 || die
		sysctl -qw net.ipv6.conf.$name.accept_ra=0 || die
		ip link set up dev $name || die
		ip netns exec $name sysctl -qw net.ipv6.conf.$dev.accept_dad=0 || die
		ip netns exec $name sysctl -qw net.ipv6.conf.$dev.accept_ra=0 || die
		ip -n $name link set up dev $dev || die
	done
}

##   exec pod command args...
##     Execute a command in a POD
cmd_exec() {
	test -n "$1" || die "No pod"
	local name=$1
	shift
	nsenter -n/var/run/netns/$name -u/var/run/utsns/$name $@
}

##   compute_address [--family=4|6] <pod>
##     Compute the addresses for a POD
cmd_compute_address() {
	test -n "$1" || die "Params missing"
	cmd_prerequisites
	local ipu_params=$(echo $1 | sed -E 's,vm-0*([0-9]+)-ns0*([0-9]+),--net=\1 --host=\2,')
	test "$__family" != 6 && \
		ipu makeip --cidr=$ADRTEMPLATE $ipu_params --subnet=2
	test "$__family" != 4 && \
		ipu makeip --cidr=$ADRTEMPLATE $ipu_params --subnet=2 --ipv6template=$PREFIX:0.0.0.0
	return 0
}

# Assign random addresses to local PODs
rndaddress_assign() {
	local mynode=$(mynode)
	local adr ns pod family dev=$PODIF
	for family in 4 6; do
		ns=1
		for adr in $(cmd_rndaddress_pods $mynode $family); do
			pod=$(cmd_name 1 $ns)
			test "$PODIF" = "hostname" && dev=$pod
			ip -$family -n $pod addr add $adr dev $dev || die
			ns=$((ns + 1))
		done
	done
}

##   assign_addresses [--random] [count] [first]
##     Assign addresses to PODs. --random takes addresses from
##     "/etc/rnd-addresses".
cmd_assign_addresses() {
	if test "$__random" = "yes"; then
		rndaddress_assign
		return 0
	fi
	local pod adr dev=$PODIF
	for pod in $(cmd_name $1 $2); do
		for __family in 4 6; do
			test "$PODIF" = "hostname" && dev=$pod
			adr=$(cmd_compute_address $pod)
			ip -$__family -n $pod addr replace $adr dev $dev
		done
	done
}

# The "/etc/rnd-addresses" is generated by the "./tar" script (so it's
# the same on all nodes) and contain numbers 1-254 in random
# order. The first $__nvm numbers are reserved for nodes, the rest is
# sliced up to PODs.

##   rndaddress_node <node> [family]
##     Get a random address for a node. The address is taken from
##     "/etc/rnd-addresses" which is the same on all nodes.
cmd_rndaddress_node() {
	test -n "$1" || die "Parameter missing"
	local node=$1
	local a=$(tail -n +$node /etc/rnd-addresses | head -1);
	test "$2" != "6" && \
		ipu makeip --cidr=$ADRTEMPLATE --host=$a --subnet=2
	test "$2" != "4" && \
		ipu makeip --cidr=$ADRTEMPLATE --host=$a --subnet=2 --ipv6template=$PREFIX:0.0.0.0

}
##   rndaddress_pods <node> [family]
##     Print random addresses for $NPODS pods on a node.
cmd_rndaddress_pods() {
	test -n "$1" || die "Parameter missing"
	local node=$1
	local first=$(((node - 1) * NPODS + 1 + __nvm))
	local a ns=1
	for a in $(tail -n +$first /etc/rnd-addresses | head -$NPODS); do
		test "$2" != "6" && \
			ipu makeip --cidr=$ADRTEMPLATE --host=$a --subnet=2
		test "$2" != "4" && \
			ipu makeip --cidr=$ADRTEMPLATE --host=$a --subnet=2 --ipv6template=1000::1:0.0.0.0
		ns=$((ns + 1))
	done
}
##   address_pods <node> [family]
##     Print addresses for $NPODS pods on a node.
cmd_address_pods() {
	test -n "$1" || die "Parameter missing"
	local node=$1
	local pod
	for pod in $(cmd_for); do
		test "$2" != "6" && \
			ipu makeip --cidr=$ADRTEMPLATE --net=$node --host=$pod --subnet=2
		test "$2" != "4" && \
			ipu makeip --cidr=$ADRTEMPLATE --net=$node --host=$pod --subnet=2 --ipv6template=1000::1:0.0.0.0
	done
}

##   cni_bridge_configure
##     Configure CNI-bridge
cmd_cni_bridge_configure() {
	cmd_prerequisites
	test -x /opt/cni/bin/bridge || die "CNI-plugins not included"
	local ipv4=$(ipu makeip --cidr=$ADRTEMPLATE --net=$(mynode) --subnet=2)
	local ipv6=$(ipu makeip --cidr=$ADRTEMPLATE --net=$(mynode) --subnet=2 --ipv6template=$PREFIX:0.0.0.0)
	mkdir -p /etc/cni/net.d
	cat > /etc/cni/10-bridge.conf <<EOF
{
    "cniVersion": "1.0.0",
    "name": "xnet",
    "type": "bridge",
    "isDefaultGateway": true,
    "hairpinMode": true,
    "ipam": {
      "type": "host-local",
      "ranges": [
        [ { "subnet": "$ipv4" } ],
        [ { "subnet": "$ipv6" } ]
      ]
    }
}
EOF
}

##   cni_bridge_start
##     Connect PODs using CNI-bridge. Logs like /tmp/vm-001-ns01.json
cmd_cni_bridge_start() {
	test -r /etc/cni/10-bridge.conf || die "Bridge not configured"
	local n dev=$PODIF
	# This takes an age so do it in parallel
	for n in $(cmd_name); do
		test "$PODIF" = "hostname" && dev=$n
		# These takes >1s (because of DAD) so execute in parallel
		CNI_CONTAINERID=$n CNI_NETNS=/var/run/netns/$n CNI_IFNAME=$dev \
			CNI_PATH=/opt/cni/bin CNI_COMMAND=ADD /opt/cni/bin/bridge \
			< /etc/cni/10-bridge.conf > /tmp/$n.json &
	done
	wait
}

##   assign_bridge_address [--random] <device>
##     Assign addresses to a bridge
cmd_assign_bridge_address() {
	test -n "$1" || die "Param missing"
	cmd_prerequisites
	local br=$1
	sysctl -qw net.ipv6.conf.$br.accept_dad=0 || die
	ip link set up dev $br || die

	local adr mynode
	mynode=$(mynode)

	if test "$__random" = "yes"; then
		adr=$(cmd_rndaddress_node $mynode 4)
		ip addr replace $adr dev $br || die
		adr=$(cmd_rndaddress_node $mynode 6)
		ip -6 addr replace $adr dev $br || die
		return 0
	fi

	adr=$(ipu makeip --cidr=$ADRTEMPLATE --net=$mynode --subnet=2)
	ip addr replace $adr dev $br || die
	adr=$(ipu makeip --cidr=$ADRTEMPLATE --net=$mynode --subnet=2 --ipv6template=$PREFIX:0.0.0.0)
	ip -6 addr replace $adr dev $br || die
}

##   connect_to_bridge <bridge> [count] [first]
##     Connect PODs to a bridge.
cmd_connect_to_bridge() {
	test -n "$1" || die "Param missing"
	local pod br=$1
	for pod in $(cmd_name $2 $3); do
		ip link set dev $pod master $br || die
	done
}
##   set_default_route [--bridge=device]
##     Set default routes in local PODs. If --bridge is specified
##     addresses are taken from that device.
cmd_set_default_route() {
	local adr family pod mynode
	if test -n "$__bridge"; then
		for adr in $(ip -j addr show dev $__bridge | \
			jq -r '.[]|select(.addr_info)|.addr_info[]|select(.scope == "global")|.local'); do
			family=4
			echo $adr | grep -q : && family=6
			for pod in $(cmd_name $2 $3); do
				ip -$family -n $pod route replace default via $adr || die $adr
			done
		done
		return 0
	fi

	mynode=$(mynode)
	for pod in $(cmd_name $2 $3); do
		adr=$(ipu makeip --cidr=$ADRTEMPLATE --net=$mynode --subnet=2 | cut -d/ -f1)
		ip -4 -n $pod route replace default via $adr || die $adr
		adr=$(ipu makeip --cidr=$ADRTEMPLATE --net=$mynode --subnet=2 --ipv6template=$PREFIX:0.0.0.0 | cut -d/ -f1)
		ip -6 -n $pod route replace default via $adr || die $adr
	done
}

##   setup_routes [--net=1]
##     Setup routing to POD networks on other nodes
cmd_setup_routes() {
	local node adr via
	local mynode=$(mynode)
	local net=1
	test -n "$__net" && net=$__net
	for node in $(seq 1 $__nvm); do
		test $node -eq $mynode && continue
		adr=$(ipu makeip --cidr=$ADRTEMPLATE --net=$node --subnet=2)
		via=192.168.$net.$node
		ip route add $adr via $via
		adr=$(ipu makeip --cidr=$ADRTEMPLATE --net=$node --subnet=2 --ipv6template=$PREFIX:0.0.0.0)
		via=$PREFIX:192.168.$net.$node
		ip -6 route add $adr via $via
	done
}
##   add_ipvlan <master-dev>
##     Add ipvlan's to PODs and "ipvlan-<master-dev>" in main netns
cmd_add_ipvlan() {
	test -n "$1" || die "Param missing"
	local pod dev=$PODIF
	for pod in $(cmd_name); do
		ip link add link $1 name $pod type ipvlan mode l2 || die "link add"
		ip link set netns $pod dev $pod || die "link set netns"
		test "$PODIF" = "hostname" && dev=$pod
		ip -n $pod link set name $dev dev $pod || die "link set name"
		ip netns exec $pod sysctl -qw net.ipv6.conf.$dev.accept_dad=0 || die
		ip -n $pod link set up dev $dev || die "link set up"
	done
	ip link add link $1 name ipvlan-$1 type ipvlan mode l2 || die "link add"
}
##   ping_all_random
##     Ping all random address, includes all bridges and all PODs.
##     Ping functions can be called from within PODs with "ip netns exec".
cmd_ping_all_random() {
	local count=$((__nvm * NPODS + __nvm))
	local a adr
	for a in $(head -$count /etc/rnd-addresses); do
		adr=$(ipu makeip --cidr=$ADRTEMPLATE --host=$a)
		#log "Ping $adr"
		tex ping -c1 -W1 $adr || tdie $adr
		adr=$(ipu makeip --cidr=$ADRTEMPLATE --host=$a --ipv6template=$PREFIX:0.0.0.0)
		#log "Ping $adr"
		tex ping -c1 -W1 $adr || die $adr
	done
}
##   ping_all_pods
##     Ping all pods. Random addresses must NOT be used. Bridges are not pinged
cmd_tcase_ping_all_pods() {
	local node adr
	for node in $(seq 1 $__nvm); do
		for adr in $(cmd_address_pods $node | cut -d/ -f1); do
			#log "Ping $adr"
			tex ping -c1 -W1 $adr || die $adr
		done
	done
}

test -r /usr/lib/xctest && . /usr/lib/xctest
indent='  '

##
# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
