#! /bin/sh
##
## qemu-sriov_test --
##
##   Test script for qemu-sriov executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
test -n "$PREFIX" || PREFIX=1000::1
yamld=/etc/kubernetes/sriov
test_yamld=/etc/kubernetes/test
multus_yamld=/etc/kubernetes/multus

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_check_namespaces() {
    test_namespaces $1
}
cmd_tcase_check_nodes() {
    test_nodes
}
##   tcase_modprobe
##     Load the igb modules
cmd_tcase_modprobe() {
	tcase "Load the igb modules"
	modprobe igb || tdie "modprobe igb"
	modprobe igbvf || tdie "modprobe igbvf"
	test -n "$1" || return 0
	local dev=$1
	ip link show dev $dev 2>&1 && tlog "$dev exist. Modules already loaded?" && return
	ip link show dev $dev || tdie "$dev was not created"
	# Check the PF
	check_82576 1 || tdie "Check PF"
}
##   tcase_create_vfs
##     Create 2 VFs
cmd_tcase_create_vfs() {
	tcase "Create 2 VFs"
	# Check that we only have the PF
	check_82576 1 || tdie "Check PF"
	echo 2 > /sys/bus/pci/devices/0000:01:00.0/sriov_numvfs || tdie "Create VFs"
	check_82576 3 || tdie "Check VFs"
	/bin/lspci | grep Virtual 1>&2
}
check_82576() {
	# Just "lspci" doesn't work. Some BusyBox thing?
	local n=$(/bin/lspci | grep 82576 | wc -l)
	echo "Found 82576 devices [$n], expected [$1]"
	test $n -eq $1
}
cmd_tcase_ifup() {
	tcase "Bring up dev [$1]"
	test -n "$1" || tdie "No dev"
	local dev=$1
	ip link set up dev $dev || die "Up $dev"
}
##   tcase_ifup dev ipv4
##     Bring up an interface and set addresses
cmd_tcase_ifup_addr() {
	tcase "Bring up dev [$1]"
	test -n "$1" || tdie "No dev"
	test -n "$2" || tdie "No address"
	local dev=$1
	local adr=$2
	ip link set up dev $dev || die "Up $dev"
	ip addr add $adr/24 dev $dev || tdie "Assign $adr"
	ip -6 addr add $PREFIX:$adr/120 dev $dev || tdie "Assign $PREFIX:$adr"
}
cmd_tcase_wait_for_link_up() {
	local timeout=10
	local state="UP"
	local dev="eth1"
	test -n "$1" && dev="$1"
	tcase "Wait for link $dev $state"
	pushv $timeout
	tex "check_link_state $dev $state"
}
check_link_state() {
	dev="$1"
	state="$2"
	echo "$(ip link show dev $dev | grep 'state' | cut -d ' ' -f9)"
	test $(ip link show dev $dev | grep 'state' | cut -d ' ' -f9) == $state
}
cmd_tcase_wait_for_ping() {
	local timeout=10
	local addr="$1"
	tcase "Wait for ping $addr"
	pushv $timeout
	tex "ping -c1 -W1 $addr"
}
##   tcase_ping addr
##     Ping address
cmd_tcase_ping() {
	tcase "Ping [$1]"
	test -n "$1" || tdie "No address"
	ping -c1 -W1 $1 || tdie "Ping [$1]"
}
cmd_tcase_deploy_multus() {
	tcase "Deploy Multus installer"
	$kubectl apply -f $multus_yamld/multus-install.yaml
	kubectl="kubectl -n kube-system" test_daemonset multus-install 180
}
cmd_tcase_deploy_whereabouts() {
	tcase "Deploy whereabouts"
	local d=/etc/kubernetes/whereabouts
	$kubectl apply -f $d/whereabouts.cni.cncf.io_ippools.yaml || tdie
	$kubectl apply -f $d/whereabouts.cni.cncf.io_overlappingrangeipreservations.yaml || tdie

}
cmd_tcase_deploy_sriov_daemonsets() {
	tcase "Deploy SRIOV daemonsets"
	apply_k8s $yamld
	kubectl="kubectl -n kube-system"
	test_daemonset kube-sriov-cni-ds-amd64 180
	test_daemonset kube-sriov-device-plugin-amd64 180
}
cmd_tcase_deploy_test_deployments() {
	tcase "Deploy test deployments"
	apply_k8s $test_yamld
	test_deployment test-deploy1 180
	test_deployment test-deploy2 180
}
##   tcase_multus_crd
##     Install Multus CRDs
cmd_tcase_multus_crd() {
	tcase "Install Multus CRDs"
	kubectl create -f /etc/kubernetes/multus/multus-crd.yaml
	kubectl -n kube-system create -f /etc/kubernetes/multus/multus-crd-bridge.yaml
}
##   tcase_sriovdp
##     Deploy the sriov-network-device-plugin
cmd_tcase_sriovdp() {
	tcase "Deploy the sriov-network-device-plugin"
	kubectl create -f $yamld/sriovdp-config2.yaml || tdie
	kubectl create -f $yamld/sriovdp-daemonset.yaml || tdie
	kubectl="kubectl -n kube-system"
	test_daemonset kube-sriov-device-plugin-amd64 120
}
##   tcase_vf <pf-device> <num>
##     Create VFs
cmd_tcase_vf() {
	tcase "Create $2 VFs from $1"
	test -n "$1" || tdie "Param missing"
	local master=$1
	local num=$2
	test $num -gt 0 || tdie "Num must be > 0"
	local d=/sys/class/net/$master/device
	test -r $d/sriov_numvfs || tdie "Not a PF or sriov not supported"
	local n=$(cat $d/sriov_numvfs)
	test $n -eq 0 || tdie "VFs already created [$n]"
	echo $2 > $d/sriov_numvfs || tdie "Failed to create VFs"

	# We have new "ethX" interfaces. Rename them to eth2vf0 and alike
	local name
	for n in $(seq 0 $((num - 1))); do
		name=$(find $d/virtfn$n/net -mindepth 1 -maxdepth 1)
		name=$(basename $name)
		echo "Rename $name -> ${master}vf$n"
		ip link set name ${master}vf$n dev $name
	done
}
##   tcase_allocatable
##     Check allocatable resources after adding VFs
cmd_tcase_allocatable() {
	tcase "Check allocatable resources after adding VFs"
	out=/tmp/status.allocatable
	tex check_allocatable
	cat $out
	local n
	n=$(cat $out | jq -r '."intel.com/net3"')
	test $n -eq 2 || die "intel.com/net3 $n"
	n=$(cat $out | jq -r '."intel.com/net4"')
	test $n -eq 1 || die "intel.com/net4 $n"
}
check_allocatable() {
	kubectl get node $(hostname) -o json | jq '.status.allocatable' > $out
	grep -qF '"intel.com/net3"' $out || return 1
	grep -qF '"intel.com/net4"' $out
}
##   tcase_deploy_net3
##     Deploy PODs using net3 (eth2 on nodes)
cmd_tcase_deploy_net3() {
	tcase "Deploy PODs using net3 (eth2 on nodes)"
	kubectl create -f /etc/kubernetes/test/net3-nad.yaml || tdie
	kubectl create -f /etc/kubernetes/test/net3-deployment.yaml || tdie
	test_deployment net3 120
}
##   tcase_ping_net3
##     Ping PODs on net3
cmd_tcase_ping_net3() {
	tcase "Ping PODs on net3"
	local pod out=/tmp/net3-addresses
	for pod in $(kubectl get pods -l app=net3 -o name); do
		kubectl exec $pod -- ip addr show dev net3 | grep -F ' global' >> $out
	done
	local adr
	for adr in $(cat $out | tr -s ' ' , | cut -d, -f3 | cut -d/ -f1); do
		echo "ping $adr"
		ping -c1 -W1 $adr || tdie "ping $adr"
	done
}

. /etc/profile
. /usr/lib/xctest
indent='  '


# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
