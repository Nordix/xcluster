#! /bin/sh
##
## mserver_test --
##
##   Test script for mserver executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
test -n "$DOMAIN" || DOMAIN=xcluster
yamld=/etc/kubernetes/mserver
test -n "$PREFIX" || PREFIX=1000::1


die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_check_namespaces() {
	test_namespaces
}
cmd_tcase_check_nodes() {
	test_nodes
}
cmd_tcase_vip_routes() {
	tcase "Set VIP routes (ECMP)"
	vip_route
}
##   tcase_start_daemonset
cmd_tcase_start_daemonset() {
	tcase "Start mserver DaemonSet"
	kubectl apply -f $yamld/mserver.yaml || tdie
	test_daemonset mserver 180
}
##   tcase_start_services
cmd_tcase_start_services() {
	tcase "Start mserver services"
	kubectl apply -f $yamld/services.yaml || tdie "kubectl apply"
	assign-lb-ip -svc mserver -ip 10.0.0.0,$PREFIX:10.0.0.0 || tdie tcp
	assign-lb-ip -svc mserver-udp -ip 10.0.0.0,$PREFIX:10.0.0.0 || tdie udp
	assign-lb-ip -svc mserver-sctp -ip 10.0.0.0,$PREFIX:10.0.0.0 || tdie sctp
}
##   tcase_mconnect
cmd_tcase_mconnect() {
	tcase "Mconnect"
	local ip=10.0.0.0
	tex "do_mconnect $ip" || tdie "mconnect $ip"
	tex "do_mconnect [$PREFIX:$ip]" || tdie "mconnect $PREFIX:$ip"
	tex "do_mconnect $ip -udp" || tdie "mconnect -udp $ip"
	tex "do_mconnect [$PREFIX:$ip] -udp" || tdie "mconnect $PREFIX:$ip -udp"
}

cmd_tcase_http() {
	tcase "http"
	local ip=10.0.0.0
	curl -D- -sS http://$ip/cgi-bin/info | ogrep '200 OK' || tdie
	curl -D- -sS http://[$PREFIX:$ip]/cgi-bin/info | ogrep '200 OK' || tdie
	local cnt
	cnt=$(curl -D- -sS http://$ip | wc -c)
	test $cnt -eq 3688 || tdie "$ip: Got $cnt, expected 3688"
	cnt=$(curl -D- -sS http://[$PREFIX:$ip] | wc -c)
	test $cnt -eq 3688 || tdie "$PREFIX:$ip: Got $cnt, expected 3688"
}

cmd_tcase_ctraffic() {
	local ip=10.0.0.0
	mkdir -p $tmp
	local out=$tmp/out
	tcase "Ctraffic $ip"
	ctraffic -address $ip:5003 -nconn 100 -rate 100 > $out || tdie $ip
	check_ctraffic $out
	tcase "Ctraffic $PREFIX:$ip"
	ctraffic -address [$PREFIX:$ip]:5003 -nconn 100 -rate 100 > $out || \
		tdie $PREFIX:$ip
	check_ctraffic $out
}
check_ctraffic() {
	jq . < $1
	local k v
	for k in FailedConnections Dropped FailedConnects Retransmits; do
		v=$(cat $1 | jq .$k)
		test $v -eq 0 || tdie "$k $v"
	done
	k=Received
	v=$(cat $1 | jq .$k)
	test $v -ge 980 || tdie "$k $v"
}

cmd_tcase_kahttp() {
	mkdir -p $tmp
	local out=$tmp/out
	local ip=10.0.0.0

	tcase "Kahttp check server"
	tex "curl -m 2 -sS http://$ip:8080/" || tdie
	tex "curl -m 2 -sS http://[$PREFIX:$ip]:8080/" || tdie

	tcase "Curl http access"
	curl -D- -sS http://$ip:8080/ > $out
	grep -F 'HTTP/1.1 200 OK' $out || tdie "curl $ip"
	curl -D- -sS http://[$PREFIX:$ip]:8080/ > $out
	grep -F 'HTTP/1.1 200 OK' $out || tdie "curl $PREFIX:$ip"

	tcase "Kahttp http access $ip"
	kahttp -nclients 10 -address http://$ip:8080/ \
		-host_stats -disable_ka > $out || tdie
	check_kahttp $out
	tcase "Kahttp http access $PREFIX:$ip"
	kahttp -nclients 10 -address http://[$PREFIX:$ip]:8080/ \
		-host_stats -disable_ka > $out || tdie
	check_kahttp $out

	tcase "Kahttp insecure https access $ip"
	kahttp -nclients 10 -address https://$ip:8443/ \
		-host_stats -disable_ka > $out || tdie
	check_kahttp $out
	tcase "Kahttp insecure https access $PREFIX:$ip"
	kahttp -nclients 10 -address https://[$PREFIX:$ip]:8443/ \
		-host_stats -disable_ka > $out || tdie
	check_kahttp $out

	if ! test -r /root/server.crt; then
		tlog "No [/root/server.crt], secure access test SKIPPED"
		return 0
	fi
	tcase "Curl secure https access"
	curl -D- -sS --cacert /root/server.crt \
		--resolv kahttp.localdomain:8443:10.0.0.0 \
		https://kahttp.localdomain:8443 > $out 2>&1
	if ! grep -F 'HTTP/2 200' $out; then
		cat $out
		tdie "No HTTP/2 200"
	fi
	return 0
}
check_kahttp() {
	jq . < $1
	local k v
	for k in FailedConnections Dropped FailedConnects NotOK; do
		v=$(cat $1 | jq .$k)
		test $v -eq 0 || tdie "$k $v"
	done
	k=Received
	v=$(cat $1 | jq .$k)
	test $v -ge 98 || tdie "$k $v"
}

cmd_tcase_sctpt() {
	which sctpt || tdie "sctpt not found"
	mkdir -p $tmp
	local out=$tmp/out
	local ip=10.0.0.0

	tcase "sctpt check server"
	tex "echo Hi | sctpt client --addr=10.0.0.0 --laddr=192.168.1.201" || tdie

	tcase "sctpt $ip"
	sctpt stats init || tdie "sctpt stats"
	sctpt ctraffic --clients=40 --rate=120 --addr=$ip \
		--laddr=192.168.1.201 > $out || tdie $ip
	check_sctpt $out

	tcase "sctpt $PREFIX:$ip"
	sctpt stats init || tdie "sctpt stats"
	sctpt ctraffic --clients=40 --rate=120 --addr=$PREFIX:$ip \
		--laddr=$PREFIX:192.168.1.201 > $out || tdie $PREFIX:$ip
	check_sctpt $out
}
check_sctpt() {
	jq . < $1
	local s r
	s=$(cat $1 | jq .sent)
	test $s -ge 1150 || tdie "sent $s"
	r=$(cat $1 | jq .received)
	test $s -eq $r || tdie "sent $s, received $r"
}

. /etc/profile
. /usr/lib/xctest
indent='  '


# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
