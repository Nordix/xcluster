#! /bin/sh
##
## ovs_test --
##
##   Test script for ovs executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
test -n "$PODIF" || export PODIF=eth0
test -n "$BR" || BR=br0
test -n "$SWITCH" || SWITCH=tcp:127.0.0.1

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}
## Test cases;
##   version - Log versions
cmd_tcase_version() {
	netns_test tcase_version
	tlog "BR=[$BR]"
	tlog $(ovs-vsctl --version)
}
##   create_bridge - Create ovs bridge
cmd_tcase_create_bridge() {
	tcase "Create ovs bridge"
	ovs-vsctl add-br $BR
	ip addr flush dev eth1
	ovs-vsctl add-port $BR eth1
	local mynode=$(mynode)
	ip addr add 192.168.1.$mynode/24 dev $BR
	ip -6 addr add 1000::1:192.168.1.$mynode/120 dev $BR
	netns_test assign_bridge_address --random $BR
}
##   create_ofbridge - Create ovs bridge with OpenFlow15
cmd_tcase_create_ofbridge() {
	tcase "Create ovs bridge with OpenFlow [$BR]"
	# set-fail-mode secure disables the auto-L2 mode!!
	ovs-vsctl \
		-- add-br $BR \
		-- set-fail-mode $BR secure
#		-- set-controller $BR ptcp: \
}
##   create_netns - Create PODs (network namespaces)
cmd_tcase_create_netns() {
	tcase "Create netns"
	netns_test create
}
##   create_veth - Create veth pairs to PODs and assign addresses
cmd_tcase_create_veth() {
	tcase "Create veth and assign addresses"
	netns_test veth || tdie
	netns_test assign_addresses
}
##   attach_veth - Attach veth from PODs to an OVS bridge
cmd_tcase_attach_veth() {
	tcase "Attach veth from PODs to OVS bridge $BR"
	local pod
	for pod in $(netns_test name); do
		ovs-vsctl add-port $BR $pod
	done
}
# This seems like a bug reported and ignored since 2015;
# https://mail.openvswitch.org/pipermail/ovs-discuss/2015-July/038205.html
# We must inject ALL interfaces *first* and *then* rename them. And adding
# a new POD would boot all interfaces out from the existing PODs, so this
# is basically useless. Better to have unique interface names; PODIF=hostname.
##   add_ports - Add OVS internal interfaces in PODs
cmd_tcase_add_ports() {
	tcase "Add OVS internal interfaces in PODs"
	local pod
	for pod in $(netns_test name); do
		#tlog "POD $pod"
		ovs-vsctl add-port $BR $pod -- set Interface $pod type=internal
		ip link set netns $pod $pod || tdie
	done
	local dev=$PODIF
	for pod in $(netns_test name); do
		if test "$PODIF" = "hostname"; then
			dev=$pod
		else
			ip -n $pod link set name $dev dev $pod
		fi
		ip netns exec $pod sysctl -qw net.ipv6.conf.$dev.accept_dad=0
		ip netns exec $pod sysctl -qw net.ipv6.conf.$dev.accept_ra=0
		ip netns exec $pod sysctl -qw net.ipv6.conf.$dev.addr_gen_mode=1
		ip -n $pod link set up dev $dev
	done
	
	netns_test assign_addresses --random || tdie
}
##   ping_all - Ping from main netns and from a POD
cmd_tcase_ping_all() {
	tcase "Ping all from main netns"
	netns_test ping_all_random || tdie
	local pod=$(netns_test name 1)
	tcase "Ping all from POD [$pod]"
	netns_test exec $pod netns_test ping_all_random
}
##   ping [--pod=] <address> - Ping an address
cmd_tcase_ping() {
	test -n "$1" || tdie "Parameter Missing"
	if test -n "$__pod"; then
		tcase "Ping in $__pod to $1"
		netns_test exec $__pod -- ping -c1 -W1 $1 || tdie "Ping failed $1"
	else
		tcase "Ping in main netns to $1"
		ping -c1 -W1 $1 || tdie "Ping failed $1"
	fi
	return 0
}
##   ping_negative [--pod=] <address> - Test that ping does NOT work
cmd_tcase_ping_negative() {
	test -n "$1" || tdie "Parameter Missing"
	if test -n "$__pod"; then
		tcase "Negative ping in $__pod to $1"
		netns_test exec $__pod -- ping -c1 -W1 $1 && tdie "Ping succeeded $1"
	else
		tcase "Negative ping in main netns to $1"
		ping -c1 -W1 $1 && tdie "Ping succeeded $1"
	fi
	return 0
}
##   flow_connect_pods <pod1> <pod2> - Connect 2 local pods with OpenFlow
cmd_tcase_flow_connect_pods() {
	test -n "$2" || tdie "Parameter Missing"
	tcase "OpenFlow connect $1 $2"
	#ovs-ofctl add-flow $BR "in_port=$1,actions=load:0->eth_dst,output:$2"
	#ovs-ofctl add-flow $BR "in_port=$2,actions=load:0->eth_dst,output:$1"
	ovs-ofctl add-flow $BR in_port=$1,actions=output:$2 || tdie
	ovs-ofctl add-flow $BR in_port=$2,actions=output:$1 || tdie
}
##   noarp <pod> - Set NOARP on interfaces
# NOARP implies a pre-set MAC address. For OVS load-balancing all
# target-ports must have the same MAC.
cmd_tcase_noarp() {
	test -n "$1" || tdie "Parameter Missing"
	local pod=$1
	tcase "Set NOARP for $pod"
	if false; then
		# Remove generated link-local address for the old MAC.
		# Not needed since generation of link-local addresses is disabled.
		local adr=$(ip -n $pod -6 -j addr show dev $PODIF | \
			jq -r '.[].addr_info|.[]|select(.scope == "link")|.local')
		ip -n $pod -6 addr del $adr/64 dev $PODIF || tdie
	fi
	ip link set arp off $1 || tdie
	ip -n $pod link set address 0:0:0:0:0:1 dev $PODIF
	ip -n $pod link set arp off $PODIF
}

. /etc/profile
. /usr/lib/xctest
indent='  '


# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
