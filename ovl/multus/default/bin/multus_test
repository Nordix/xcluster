#! /bin/sh
##
## multus_test --
##
##   Test script for multus executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
test -n "$DOMAIN" || DOMAIN=xcluster
yamld=/etc/kubernetes/multus

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_start_multus() {
	tcase "Start multus"
	kubectl apply -f /etc/kubernetes/multus-crd.yml || tdie
	kubectl apply -n kube-system -f /etc/kubernetes/multus-crd-bridge.yaml || tdie
	#kubectl apply -n kube-system -f /etc/kubernetes/multus-crd-bridge-spec.yaml || tdie
	kubectl apply -f /etc/kubernetes/multus-crd-ipvlan.yaml || tdie
	kubectl apply -f /etc/kubernetes/multus-crd-macvlan.yaml || tdie
	kubectl apply -f /etc/kubernetes/multus-crd-host-device.yaml || tdie
	kubectl apply -f /etc/kubernetes/multus-alpine.yaml || tdie
	kubectl apply -f /etc/kubernetes/alpine.yaml || tdie
	test_deployment alpine-deployment 180
	test_daemonset multus-alpine 180
}

cmd_tcase_check_interfaces() {
	tcase "Check extra interfaces"
	local pod dev
	for pod in $(kubectl get pods -l app=multus-alpine -o name); do
		for dev in net1 net2 net3; do
			kubectl exec $pod -- ip link show dev $dev || tdie "$pod $dev"
		done
	done
}

cmd_tcase_ping() {
	tcase "Ping on MACVLAN and IPVLAN (net1, net2)"
	local pod i adr
	for pod in $(kubectl get pods -l app=multus-alpine -o name); do
		for i in 1 2 3 4; do
			for adr in 15.0.$i.0 16.0.$i.0 4000::15.0.$i.0 4000::16.0.$i.0; do
				kubectl exec $pod -- ping -c1 -W1 $adr || tdie "Ping $pod $adr"
			done
		done
	done
}


. /etc/profile
. /usr/lib/xctest
indent='  '


# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
