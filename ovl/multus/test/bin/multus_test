#! /bin/sh
##
## multus_test --
##
##   Test script for multus executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
test -n "$DOMAIN" || DOMAIN=xcluster
yamld=/etc/kubernetes/multus

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_check_namespaces() {
	test_namespaces
	tlog "$(kubectl version | grep Server)"
}
cmd_tcase_check_nodes() {
	test_nodes
}
cmd_tcase_vip_routes() {
	tcase "Set VIP routes (ECMP)"
	vip_route
}
##   tcase_multus_crds
##     Load Multus CRDs
cmd_tcase_multus_crds() {
	tcase "Load Multus CRDs"
	kubectl create -f /etc/kubernetes/multus/multus-crd.yaml
	kubectl create -n kube-system -f /etc/kubernetes/multus/multus-crd-bridge.yaml
}
##   tcase_crds
##     Load whereabouts CRDs and create test NADs
cmd_tcase_crds() {
	tcase "Load whereabouts CRDs and create test NADs"
	kubectl create -f $yamld/multus-crd-bridge1.yaml || tdie
	kubectl create -f $yamld/multus-crd-ipvlan.yaml || tdie
	kubectl create -f $yamld/multus-crd-ipvlanl3.yaml || tdie
	kubectl create -f $yamld/multus-crd-macvlan.yaml || tdie
	kubectl create -f $yamld/multus-crd-host-device.yaml || tdie
	
	local d=/etc/kubernetes/whereabouts
	kubectl create -f $d/whereabouts.cni.cncf.io_ippools.yaml || tdie
	kubectl create -f $d/whereabouts.cni.cncf.io_overlappingrangeipreservations.yaml || tdie
}
##   tcase_annotate --addr=ipv4 --annotation=
##     Annotate the own node with address ranges for ipam "kube-node".
##     Cidr /24 and /120 is assumed, and the address must be A.B.0.0
cmd_tcase_annotate() {
	test -n "$__annotation" || tdie "No --annotation"
	test -n "$__addr" || tdie "No --addr"
	local mynode=$(mynode)
	local adr=$(echo $__addr | sed -e "s,\.0\.0$,\.$mynode\.0,")
	tcase "Annotate with $__annotation for $adr"
	kubectl annotate node $(hostname) \
		$__annotation=$adr/24,$PREFIX:$adr/120
}

##   tcase_check_interfaces --label= <interface...>
##     Check that the interfaces exist
cmd_tcase_check_interfaces() {
	tcase "Check extra interfaces [$@]"
	test -n "$1" || tdie "No interfaces"
	test -n "$__label" || tdie "No --label"
	local pod dev
	for pod in $(kubectl get pods -l app=$__label -o name); do
		for dev in $@; do
			#tlog "Check for $dev in pod $pod"
			kubectl exec $pod -- ip link show dev $dev || tdie "$pod $dev"
		done
	done
}
##   tcase_collect_addresses --label= <interface...>
##     Collect global addresses for the interfaces
cmd_tcase_collect_addresses() {
	tcase "Collect global addresses for [$@]"
	local out=/tmp/$__label
	rm -f $out
	test -n "$1" || tdie "No interfaces"
	test -n "$__label" || tdie "No --label"
	local pod dev
	for pod in $(kubectl get pods -l app=$__label -o name); do
		for dev in $@; do
			kubectl exec $pod -- ip addr show dev $dev >> $out || tdie
		done
	done	
}
##   ping --label=
##     Ping all addresses from within a (random) pod.
##     This must be preceeded by a tcase_collect_addresses
cmd_tcase_ping() {
	tcase "Ping addresses in pods [$__label]"
	test -n "$__label" || tdie "No --label"
	local out=/tmp/$__label
	test -r $out || tdie "Not readable [$out]"
	local pod=$(kubectl get pods -l app=$__label -o name | shuf | head -1)
	echo "Ping from POD [$pod]"
	local adr
	for adr in $(grep 'scope global' $out | tr -s ' ' | cut -d' ' -f3 | cut -d/ -f1); do
		#tlog "ping $adr in $pod"
		kubectl exec $pod -- ping -W1 -c1 $adr || tdie "ping $adr in $pod"
	done
}
##   tcase_ifup <iface>
##     Set the interface "up"
cmd_tcase_ifup() {
	tcase "Interface up [$1]"
	test -n "$1" || tdie "No interface"
	ip link set up dev $1 || tdie
}
##   tcase_routing --label= <iface>
##     Setup routing in pods. Routes with gw A.B.<nodeid>.1 is setup
##     for the intercase which must have an IPv4 address
##     A.B.<nodeid>.x. Cidr /16 and /112 are assumed.
cmd_tcase_routing() {
	tcase "Routing in pods [$__label] for iface $1"
	test -n "$__label" || tdie "No --label"
	test -n "$1" || tdie "No interface"
	local pod ipv4 gw cidr
	for pod in $(kubectl get pods -l app=$__label -o name); do
		ipv4=$(kubectl exec $pod -- ip addr show dev $1 \
			| grep -E '.*inet .*scope global' | tr -s ' ' | cut -d' ' -f3 | cut -d/ -f1)
		gw=$(echo $ipv4 | sed -E 's,\.[0-9]+$,\.1,')
		cidr=$(echo $ipv4 | sed -E 's,\.[0-9]+\.[0-9]+$,\.0\.0,')
		#tlog "$pod $ipv4 $gw $cidr"
		kubectl exec $pod -- ip ro add $cidr/16 via $gw
		kubectl exec $pod -- ip -6 ro add $PREFIX:$cidr/112 via $PREFIX:$gw
	done
}
##   tcase_local_ipvlan --addr=
##     Create a local ipvlan0 device in main netns. --addr must be in
##     format A.B.0.0, and the address will be A.B.<nodeid>.1
cmd_tcase_local_ipvlan() {
	local mynode=$(mynode)
	local adr=$(echo $__addr | sed -E "s,\.0\.0$,\.$mynode\.1,")
	tcase "Create a local ipvlan0 device ($adr)"
	test -n "$__addr" || tdie "No --addr"
	ip link add link eth2 name ipvlan0 type ipvlan mode l3 || tdie
	ip link set dev ipvlan0 up
	ip addr add $adr/24 dev ipvlan0
	ip -6 addr add $PREFIX:$adr/120 dev ipvlan0
}
##   tcase_node_addr --net= <iface>
##     Setup address on nodes
cmd_tcase_node_addr() {
	tcase "Setup address, net=$__net iface $1"
	test -n "$1" || tdie "No interface"
	test -n "$__net" || tdie "No --net"
	local mynode=$(mynode)
	ip addr add 192.168.$__net.$mynode/24 dev $1 || tdie
	ip -6 addr add $PREFIX:192.168.$__net.$mynode/120 dev $1 || tdie
}
##   tcase_node_routing --net= --addr= <iface>
##     Setup routing on nodes
cmd_tcase_node_routing() {
	tcase "Setup routing, net=$__net iface $1"
	test -n "$1" || tdie "No interface"
	test -n "$__net" || tdie "No --net"
	test -n "$__addr" || tdie "No --addr"
	local adr=$(echo $__addr | cut -d. -f-2)
	local mynode=$(mynode)
	local n
	for n in $(seq 1 $__nvm); do
		test $n -eq $mynode && continue
		#tlog "$adr.$n.0/24 via 192.168.$__net.$n"
		ip ro add $adr.$n.0/24 via 192.168.$__net.$n
		ip -6 ro add $PREFIX:$adr.$n.0/120 via $PREFIX:192.168.$__net.$n
	done
}
##   tcase_image [--ver=]
##     Install with the multus-install image
cmd_tcase_image() {
	local f=$yamld/multus-install.yaml
	test -n "$__ver" && \
		sed -i -E "s,multus-installer:.*,multus-installer:$__ver," $f
	local ver=$(grep -E 'image:.*multus-installer' $f | cut -d: -f3)
	tcase "Install/upgrade the multus-install image ($ver)"
	kubectl apply -f $f || tdie
	kubectl="kubectl -n kube-system"
	test_daemonset multus-install 120
}
##   tcase_deployment [--replicas=] <deployment>
##     Start a deployment
cmd_tcase_deployment() {
	tcase "Start deployment [$1] ($__replicas)"
	test -n "$1" || tdie "No deployment"
	local f=$yamld/$1.yaml
	test -r $f || tdie "Can't find manifest"
	test -n "$__replicas" && \
		sed -i -E "s,replicas: [0-9]+,replicas: $__replicas," $f
	$kubectl apply -f $f || tdie "kubectl apply"
	test_deployment $1 120
}
##   tcase_daemonset <daemonset>
##     Start a daemonset
cmd_tcase_daemonset() {
	tcase "Start daemonset [$1]"
	test -n "$1" || tdie "No daemonset"
	local f=$yamld/$1.yaml
	test -r $f || tdie "Can't find manifest"
	$kubectl apply -f $f || tdie "kubectl apply"
	test_daemonset $1 120
}

. /etc/profile
. /usr/lib/xctest
indent='  '

##
# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
