#! /bin/sh
##
## multus_test --
##
##   Test script for multus executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
test -n "$DOMAIN" || DOMAIN=xcluster
yamld=/etc/kubernetes/multus

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_check_namespaces() {
	test_namespaces
	tlog "$(kubectl version | grep Server)"
}
cmd_tcase_check_nodes() {
	test_nodes
}
cmd_tcase_vip_routes() {
	tcase "Set VIP routes (ECMP)"
	vip_route
}

cmd_tcase_start_multus() {
	tcase "Start multus"
	kubectl apply -f $yamld/multus-crd.yaml || tdie
	kubectl apply -n kube-system -f $yamld/multus-crd-bridge.yaml || tdie
}

cmd_tcase_crds() {
	tcase "Load CRDs (whereabouts)"
	#kubectl apply -n kube-system -f $yamld/multus-crd-bridge-spec.yaml || tdie
	kubectl apply -f $yamld/multus-crd-ipvlan.yaml || tdie
	kubectl apply -f $yamld/multus-crd-macvlan.yaml || tdie
	kubectl apply -f $yamld/multus-crd-host-device.yaml || tdie
	local d=/etc/kubernetes/whereabouts
	kubectl apply -f $d/whereabouts.cni.cncf.io_ippools.yaml || tdie
	kubectl apply -f $d/whereabouts.cni.cncf.io_overlappingrangeipreservations.yaml || tdie
}

cmd_tcase_alpine() {
	tcase "Start alpine pods"
	kubectl apply -f $yamld/multus-alpine.yaml || tdie
	kubectl apply -f /etc/kubernetes/alpine.yaml || tdie
	test_deployment alpine-deployment 180
	test_daemonset multus-alpine 180
}

cmd_tcase_multus_server() {
	tcase "Start multus server/client"
	kubectl apply -f /etc/kubernetes/multus-service/deployment.yaml || tdie
	test_deployment multus-server 180
	test_deployment multus-client 30
}

cmd_tcase_multus_proxy() {
	tcase "Start multus-proxy"
	multus-proxy --kubeconfig $KUBECONFIG \
		--container-runtime-endpoint unix:///var/run/crio/crio.sock \
		> /var/log/multus-proxy.log 2>&1 &
}
cmd_tcase_multus_service_controller() {
	tcase "Start multus-service-controller"
	multus-service-controller --kubeconfig $KUBECONFIG \
		> /var/log/multus-service-controller.log 2>&1 &
}
cmd_tcase_check_interfaces() {
	tcase "Check extra interfaces"
	local pod dev
	for pod in $(kubectl get pods -l app=multus-alpine -o name); do
		for dev in net1 net2 net3; do
			kubectl exec $pod -- ip link show dev $dev || tdie "$pod $dev"
		done
	done
}

cmd_tcase_ping() {
	tcase "Ping on MACVLAN and IPVLAN (net1, net2)"
	local pod i adr
	for pod in $(kubectl get pods -l app=multus-alpine -o name); do
		for i in 1 2 3 4; do
			for adr in 15.0.$i.0 4000::15.0.$i.0; do
				kubectl exec $pod -- ping -c1 -W1 $adr || tdie "Ping $pod $adr"
			done
		done
		for i in 1 2 3 4; do
			for adr in 4000::16.0.0.$i; do
				kubectl exec $pod -- ping -c1 -W1 $adr || tdie "Ping $pod $adr"
			done
		done
	done
}

cmd_tcase_ifup() {
	tcase "Interface up [$1]"
	test -n "$1" || tdie "No interface"
	ip link set up dev $1 || tdie
}

##   tcase_annotate
##     Annotate the own node with address ranges
cmd_tcase_annotate() {
	local n=$(mynode)
	kubectl annotate node $(hostname) example.com/bridge-ranges="\"ranges\": [
  [ { \"subnet\": \"4000::16.0.$n.0/120\" } ],
  [ { \"subnet\": \"16.0.$n.0/24\" } ]
]"
}
##   tcase_bridge
##     Start a bridge network using node-annotation IPAM. Start
##     an Alpine Deployment with "net1" interfaces and check addresses.
cmd_tcase_bridge() {
	tcase "Start a bridge network using node-annotation IPAM"
	kubectl apply -f $yamld/multus-crd-bridge2.yaml || tdie
	kubectl apply -f $yamld/multus-alpine-bridge.yaml || tdie
	test_deployment multus-alpine-bridge 180
	mkdir -p $tmp
	local pod
	for pod in $($kubectl get pods -l app=multus-alpine-bridge -o name); do
		log "Check POD $pod ..."
		$kubectl exec $pod -- ip addr show dev net1 > $tmp/adr || \
			tdie "Get addresses"
		cat $tmp/adr
		grep -E '16\.0\.[0-9]+\.[0-9]+/24' $tmp/adr || tdie "IPv4 address"
		grep -E '4000::1000:[0-9a-f]+/120' $tmp/adr || tdie "IPv6 address"
	done
}
##   tcase_image
##     Install with the multus-install image
cmd_tcase_image() {
	local f=$yamld/multus-install.yaml
	test -n "$__ver" && \
		sed -i -E "s,multus-installer:.*,multus-installer:$__ver," $f
	local ver=$(grep -E 'image:.*multus-installer' $f | cut -d: -f3)
	tcase "Install/upgrade the multus-install image ($ver)"
	kubectl apply -f $f || tdie
	kubectl="kubectl -n kube-system"
	test_daemonset multus-install 120
}

. /etc/profile
. /usr/lib/xctest
indent='  '

##
# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
