#! /bin/sh
##
## load-balancer_test --
##
##   Test script for load-balancer executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
test -n "$DOMAIN" || DOMAIN=xcluster

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_mconnect() {
	tcase "mconnect to; $1"
	local srccidr=50.0.0.0/16
	echo "$1" | grep -q -F ']' && srccidr=2000::/112
	mkdir -p $tmp
    local out=$tmp/out
	if ! tex "send_traffic $1 $srccidr $out"; then
		cat $out
		tdie send_traffic
	fi
	check_mconnect_result $out || tdie
}
send_traffic() {
	mconnect -address $1 -nconn 100 -output json -srccidr $2 > $3
}

cmd_tcase_ctraffic_start() {
	tcase "Start traffic in background [$@]"
	test -n "$__out" || __out=/tmp/ctraffic.out
	ctraffic $@ -stats all > $__out 2> /dev/null &
}
cmd_tcase_ctraffic_wait() {
	test -n "$__timeout" || __timeout=60
	pushv $__timeout
	tcase "Wait for all ctraffic processes to stop ($__timeout)"
	tex check_ctraffic
}
check_ctraffic() {
	if ps www | grep -v grep | grep -F 'ctraffic '; then
		tlog "Ctraffic still running..."
		return 1
	fi
	return 0
}

cmd_tcase_scale_lb() {
	local net=1
	hostname | grep -q vm-22 && net=2
	if test -n "$1"; then
		tcase "Ecmp; scale in load-balancer [$1]"
	else
		tcase "Ecmp; scale out load-balancer"
	fi

	local i targets last_router
	last_router=$((200 + __nrouters))
	for i in $(seq 201 $last_router); do
		test "$i" = "$1" && continue
		targets="$targets nexthop via 192.168.$net.$i"
	done
	ip ro change default $targets
	targets=''
	for i in $(seq 201 $last_router); do
		test "$i" = "$1" && continue
		targets="$targets nexthop via 1000::1:192.168.$net.$i"
	done
	ip -6 ro change default $targets
}


# ----------------------------------------------------------------------
# Ecmp

cmd_tcase_ecmp_scale() {
	local exclude=":$(echo $@ | tr ' ' :):"
	if test -n "$1"; then
		tcase "Ecmp; scale in [$exclude]"
	else
		tcase "Ecmp; scale out"
	fi
	
	local i targets
	for i in $(seq 1 $__nvm); do
		echo $exclude | grep -q ":$i:" && continue
		targets="$targets nexthop via 192.168.1.$i"
	done
	ip ro change 10.0.0.0/24 $targets
	targets=''
	for i in $(seq 1 $__nvm); do
		echo $exclude | grep -q ":$i:" && continue
		targets="$targets nexthop via 1000::1:192.168.1.$i"
	done
	ip -6 ro change 1000::/120 $targets
}

# ----------------------------------------------------------------------
# nfqueue

cmd_tcase_nfqueue_activate_all() {
	local vms="$(seq 1 $__nvm | tr '\n' ' ')"
	tcase "nfqueue activate all [$vms]"
	if test "$FRAG" = "yes"; then
		nfqueuelb activate $vms
		test -n "$__nrouters" || __nrouters=1
		for n in $(seq 1 $__nrouters); do
			nfqueuelb activate --shm=nfqueueLb $n
		done
	else
		lb activate $vms
	fi
}

cmd_tcase_nfqueue_scale_in() {
	tcase "nfqueue scale-in [$@]"
	if test -z "$1"; then
		tlog "Nothing to scale"
		return 0
	fi
	lb deactivate $@
}

cmd_tcase_nfqueue_scale_out() {
	tcase "nfqueue scale-out [$@]"
	if test -z "$1"; then
		tlog "Nothing to scale"
		return 0
	fi
	lb activate $@
}

# ----------------------------------------------------------------------
# ipvs

cmd_tcase_ipvs_scale_in() {
	tcase "ipvs scale-in [$@]"
	if test -z "$1"; then
		tlog "Nothing to scale"
		return 0
	fi
	local x
	for x in $@; do
		ipvsadm -d -t 10.0.0.0:5001 -r 192.168.1.$x:5001
		ipvsadm -d -t [1000::]:5001 -r [1000::1:192.168.1.$x]:5001
		ipvsadm -d -t 10.0.0.0:5003 -r 192.168.1.$x:5003
		ipvsadm -d -t [1000::]:5003 -r [1000::1:192.168.1.$x]:5003
	done
}

cmd_tcase_ipvs_scale_out() {
	tcase "ipvs scale-out [$@]"
	if test -z "$1"; then
		tlog "Nothing to scale"
		return 0
	fi
	for x in $@; do
		ipvsadm -a -t 10.0.0.0:5001 -r 192.168.1.$x:5001
		ipvsadm -a -t [1000::]:5001 -r [1000::1:192.168.1.$x]:5001
		ipvsadm -a -t 10.0.0.0:5003 -r 192.168.1.$x:5003
		ipvsadm -a -t [1000::]:5003 -r [1000::1:192.168.1.$x]:5003
	done
}

# ----------------------------------------------------------------------
# XDP

cmd_tcase_xdp_init() {
	tcase "Init XDP and maglev shared mem"
	bpftool prog loadall /bin/xdp_vip_kern.o /sys/fs/bpf/lb \
		pinmaps /sys/fs/bpf/lb 2>&1 || tdie "bpftool prog"
	ip link set dev eth2 xdpgeneric pinned /sys/fs/bpf/lb/xdp_vip || tdie eth2
	ip link set dev eth1 xdpgeneric pinned /sys/fs/bpf/lb/xdp_vip || tdie eth1
	# NO!! ethtool -L eth1 combined 1 2>&1 || tdie "ethtool eth1"
	ethtool -L eth2 combined 1 2>&1 || tdie "ethtool eth2"
	bpftool map update name xdp_vip_map \
		key hex 0 0 0 0 0 0 0 0 0 0 ff ff 0a 0 0 0 value 1 0 0 0 || tdie map4
	bpftool map update name xdp_vip_map \
		key hex 10 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0 value 1 0 0 0 || tdie map6
	xdplb init
	local i
	for i in $(seq 1 $__nvm); do
		xdplb activate --mac=0:0:0:1:1:$i $((i - 1))
	done
}
cmd_tcase_xdp_start() {
	tcase "Start the XDP load-balancer"
	xdplb lb --idev=eth2 --edev=eth1 > /var/log/xdplb.log 2>&1 &
}

. /etc/profile
. /usr/lib/xctest
indent='  '


# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
