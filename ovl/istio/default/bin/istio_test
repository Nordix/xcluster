#! /bin/sh
##
## istio_test --
##
##   Test script for istio executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
test -n "$DOMAIN" || DOMAIN=xcluster
yamld=/etc/kubernetes/istio

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_check_namespaces() {
	test_namespaces
	tlog "$(kubectl version --short=true | grep Server)"
}
cmd_tcase_check_nodes() {
	test_nodes
}
cmd_tcase_vip_route() {
	tcase "Set VIP routes (ECMP)"
	vip_route
}

cmd_tcase_install_local() {
	cd /root
	export ISTIO_VERSION=$(cat ISTIO_VERSION)
	tcase "Install local built istio"
	tar xzf istio-$ISTIO_VERSION-linux-amd64.tar.gz || tdie Unpack
	local istioctl=$PWD/istio-$ISTIO_VERSION/bin/istioctl
	$istioctl install -y --set profile=demo --set tag=$TAG \
		--set hub=registry.nordix.org/cloud-native || tdie Install
	$kubectl label namespace default istio-injection=enabled --overwrite
}

cmd_tcase_install() {
	cd /root
	export ISTIO_VERSION=$(cat ISTIO_VERSION)
	tcase "Install istio $ISTIO_VERSION"
	tar xzf istio-$ISTIO_VERSION-linux-amd64.tar.gz || tdie Unpack
	local istioctl=$PWD/istio-$ISTIO_VERSION/bin/istioctl
	$istioctl install -y --set profile=demo || tdie Install
	$kubectl label namespace default istio-injection=enabled --overwrite
}

cmd_tcase_ingress_gw() {
	tcase "Configure the ingress gateway"
	if ipv6base; then
		assign-lb-ip -n istio-system -svc istio-ingressgateway -ip 1000::10
		echo "1000::10 kahttp.external" >> /etc/hosts
	else
		assign-lb-ip -n istio-system -svc istio-ingressgateway -ip 10.0.0.10
		echo "10.0.0.10 kahttp.external" >> /etc/hosts
	fi
	apply_k8s $yamld || tdie

	isDual || return 0

	assign-lb-ip -n istio-system -svc istio-ipv4 -ip 10.0.0.20
	assign-lb-ip -n istio-system -svc istio-ipv6 -ip 1000::20

	isDual3 || return 0

	assign-lb-ip -n istio-system -svc istio-dual -ip 10.0.0.30,1000::30
}

cmd_tcase_prometheus() {
	tcase "Start Prometheus"
	$kubectl apply -f /root/prometheus.yaml || tdie
	kubectl="kubectl -n istio-system"
	test_deployment prometheus 180
}

cmd_tcase_external_http() {
	tcase "External http traffic"
	if ipv6base; then
		curl_to http://[1000::80]
		grep -q kahttp.external /etc/hosts || \
			echo "1000::10 kahttp.external" >> /etc/hosts
	else
		curl_to http://10.0.0.80
		grep -q kahttp.external /etc/hosts || \
			echo "10.0.0.10 kahttp.external" >> /etc/hosts
	fi

	curl_to http://kahttp.external/

	isDual || return 0

	# Not handled by the istio-ingressgateway
	curl_to http://10.0.0.81
	curl_to http://[1000::81]

	# Dual-stack handled by the istio-ingressgateway
	sed -i -e '/kahttp.external/d' /etc/hosts
	echo "10.0.0.20 kahttp.external" >> /etc/hosts
	curl_to http://kahttp.external/
	sed -i -e '/kahttp.external/d' /etc/hosts
	echo "1000::20 kahttp.external" >> /etc/hosts
	curl_to http://kahttp.external/

	isDual3 || return 0

	sed -i -e '/kahttp.external/d' /etc/hosts
	echo "10.0.0.30 kahttp.external" >> /etc/hosts
	curl_to http://kahttp.external/
	sed -i -e '/kahttp.external/d' /etc/hosts
	echo "1000::30 kahttp.external" >> /etc/hosts
	curl_to http://kahttp.external/
}
curl_to() {
	local dn
	echo $1 | grep -q kahttp && dn="($(grep kahttp.external /etc/hosts))"
	tlog "Traffic to; $1 $dn"
	mkdir -p $tmp
	curl -s --http1.1 -D - $1 > $tmp/out || tdie "$1"
	grep -q "200 OK" $tmp/out || tdie "Not OK"
	tlog "Src; $(grep -F 'RemoteAddr:' $tmp/out)"
}

. /etc/profile
. /usr/lib/xctest
indent='  '


# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
