#! /bin/sh
##
## limage --
##
##   Handle local images containers-storage format
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
tmp=/tmp/${prg}_$$

die() {
    echo "ERROR: $*" >&2
    rm -rf $tmp
    exit 1
}
help() {
    grep '^##' $0 | cut -c3-
    rm -rf $tmp
    exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

##  env
##    Print environment.
##
cmd_env() {
	test -n "$__tmp" || __tmp=$tmp
	test "$cmd" = "env" && set | grep -E '^(__.*)='
}


##  load <tar-file>
##    Load images from a tar file.
##
cmd_load() {
	test -n "$1" || die "No archive"
	test -r "$1" || die "Not readable [$1]"
	cmd_env
	test -d "$__tmp" || mkdir -p $__tmp || dir "Failed; mkdir -p $__tmp"

	local ar=$(readlink -f $1)
	tar -C $__tmp -xf $ar || die "Failed to untar"

	local f t
	for f in $(find $__tmp -type f); do
		t=$(echo $f | sed -e "s,$__tmp/,,")
		ln -sf $f $__tmp/image
		echo $t
		skopeo copy docker-archive:$__tmp/image containers-storage:$t || \
			die "Failed; skopeo copy docker-archive:$__tmp/image containers-storage:$t"
	done
	rm -rf $__tmp
}


# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 $hook || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
    if echo $1 | grep -q =; then
	o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
	v=$(echo "$1" | cut -d= -f2-)
	eval "$o=\"$v\""
    else
	o=$(echo "$1" | sed -e 's,-,_,g')
	eval "$o=yes"
    fi
    shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
