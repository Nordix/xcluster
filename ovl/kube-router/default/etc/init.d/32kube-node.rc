#! /bin/sh

export PATH="/bin:/sbin:/usr/bin:/usr/sbin"

die() {
        echo "$@"
        exit 1
}

hostname | grep -Eq 'vm-[0-9]+$' || die "Invalid hostname [$(hostname)]"
i=$(hostname | cut -d- -f2 | sed -re 's,^0+,,')
test $i -le 200 || exit 0

. /etc/profile

ip route add default via 192.168.1.201
crio -log-level debug > /var/log/crio.log 2>&1 &
sleep 0.2

start_kube_router() {
	kube-router --run-service-proxy -v=3 --cluster-cidr=11.0.0.0/16 \
		--kubeconfig /etc/kubernetes/kubeconfig --run-router=true \
		--run-firewall=false --enable-overlay=false --advertise-pod-cidr=false \
		--advertise-external-ip=true --advertise-loadbalancer-ip=true \
		--advertise-cluster-ip=true --routes-sync-period=10s \
		--peer-router-ips="192.168.1.201,192.168.1.202" \
		--peer-router-asns="65002,65002" --cluster-asn=65001
}
monitor_kube_router() {
	local log=/var/log/kube-router.log
	while true; do
		echo "======= $(date) kube_router starting..." >> $log		
		start_kube_router >> $log 2>&1
		echo "======= $(date) kube_router crashed" >> $log
		sleep 5
	done
}

kubelet --container-runtime=remote --node-ip=192.168.1.$i \
        --container-runtime-endpoint=unix:///var/run/crio/crio.sock \
        --image-service-endpoint=unix:///var/run/crio/crio.sock \
        --register-node=true --kubeconfig $KUBECONFIG \
        --network-plugin=cni --allow-privileged > /var/log/kubelet.log 2>&1 &

(monitor_kube_router) > /dev/null 2>&1 &

# NOTE: For --proxy-mode=iptables you *must* uncomment this line!
#ip route add 12.0.0.0/16 via 127.0.0.1
