#! /bin/sh
##
## k3s_test --
##
##   Test script for k3s executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}


cmd_tcase_check_k3s_server() {
	tcase "Check k3s server"
	local kubeconf=/etc/kubernetes/kubeconfig
	tex "cat /etc/profile | ogrep KUBECONFIG=$kubeconf" || tdie
	tex "test -r $kubeconf" || tdie
	. /etc/profile
	tex "$kubectl version" || tdie
	return 0
}
cmd_tcase_check_k3s_agent() {
	tcase "Check k3s agent"
	local kubeconf=/var/lib/rancher/k3s/agent/kubeconfig.yaml
	tex "cat /etc/profile | ogrep KUBECONFIG=$kubeconf" || tdie
	tex "test -r $kubeconf" || tdie
	. /etc/profile
	tex "$kubectl version 2>&1" || tdie
	return 0
}

cmd_tcase_check_coredns() {
	tcase "Check coredns"
	test -n "$2" || tdie "Too few parameters"
	kubectl="k3s kubectl -n kube-system"
	pushv 60 30 2
	tex "npods coredns- 1" || tdie
	popv
	$kubectl get svc kube-dns | ogrep $1 || tdie
	if echo $1 | grep -q : ; then
		tlog "SKIPPED; Nslookup for ipv6"
		return 0
	fi
	nslookup kubernetes.default.svc.cluster.local $1 | \
		ogrep "$2 kubernetes.default.svc.cluster.local" || tdie
}

cmd_tcase_start_mserver() {
	tcase "Start mserver"
	kubectl="k3s kubectl"
	$kubectl apply -f /etc/kubernetes/mserver.yaml || tdie
	pushv 30 15 2
	tex "npods mserver-deployment- 4" || tdie
	popv
}

. /etc/profile
. /usr/lib/xctest
indent='  '


# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
