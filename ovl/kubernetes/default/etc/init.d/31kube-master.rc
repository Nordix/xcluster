#! /bin/sh

export PATH="/bin:/sbin:/usr/bin:/usr/sbin"
. /etc/profile

die() {
        echo "$@"
        exit 1
}

hostname | grep -Eq 'vm-[0-9]+$' || die "Invalid hostname [$(hostname)]"
i=$(hostname | cut -d- -f2 | sed -re 's,^0+,,')

test $i -eq 1 || exit 0

. /etc/profile

CLUSTER_CIDR=11.0.0.0/16,1100::/48
MASTER_IP=${IPV6_PREFIX}192.168.1.1

SERVICE_RANGE=12.0.0.0/16,fd00:4000::/112
test -n "$IPV6_PREFIX" && SERVICE_RANGE=fd00:4000::/112,12.0.0.0/16

apiserver() {
	local log=/var/log/kube-apiserver.log
	logger -s -t K8s "STARTED: kube-apiserver at $(date)" >> log 2>&1
	kube-apiserver --token-auth-file=/srv/kubernetes/known_tokens.csv \
		--allow-privileged=true \
		--insecure-bind-address=$MASTER_IP --advertise-address=$MASTER_IP \
		--authorization-mode=AlwaysAllow \
		--feature-gates IPv6DualStack=true,SCTPSupport=true \
		--etcd-servers=http://127.0.0.1:2379 --anonymous-auth=false \
		--service-cluster-ip-range=$SERVICE_RANGE \
		--enable-admission-plugins=ServiceAccount,AlwaysAdmit \
		--client-ca-file=/srv/kubernetes/ca.crt \
		--tls-private-key-file=/srv/kubernetes/server.key \
		--tls-cert-file=/srv/kubernetes/server.crt \
		>> $log 2>&1
}

controller() {
	local log=/var/log/kube-controller-manager.log
	logger -s -t K8s "STARTED: kube-controller-manager at $(date)" >> log 2>&1
	kube-controller-manager --kubeconfig $KUBECONFIG \
		--allocate-node-cidrs=true --cluster-cidr=$CLUSTER_CIDR \
		--controllers="*,serviceaccount,serviceaccount-token" \
		--feature-gates IPv6DualStack=true \
		--service-account-private-key-file=/srv/kubernetes/server.key \
		--root-ca-file=/srv/kubernetes/server.crt --leader-elect=false \
		>> $log 2>&1
}

scheduler() {
	local log=/var/log/kube-scheduler.log
	logger -s -t K8s "STARTED: kube-scheduler at $(date)" >> log 2>&1
	kube-scheduler --kubeconfig $KUBECONFIG --leader-elect=false \
		--feature-gates IPv6DualStack=true \
		>> $log 2>&1
}

monitor() {
	while true; do
		logger -t K8s-monitor "STARTING: $1"
		$1
		logger -t K8s-monitor "DIED: $1"
		sleep 2
	done
}

(monitor apiserver) > /dev/null 2>&1 &
(monitor controller) > /dev/null 2>&1 &
(monitor scheduler) > /dev/null 2>&1 &
