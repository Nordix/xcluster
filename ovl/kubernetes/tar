#! /bin/sh

dir=$(dirname $0); dir=$(readlink -f $dir)
tmp=/tmp/xcluster_$$
die() {
    echo "ERROR: $*" >&2
    rm -rf $tmp
    exit 1
}
log() {
    echo "$*" >&2
}
test -n "$1" || die "No out-file"

rm -rf $tmp
mkdir -p $tmp/bin $tmp/sbin
cp -R $dir/default/* $tmp
for s in $(echo "$SETUP" | tr ',' ' '); do
	test -d $dir/$s || continue
	cp -R $dir/$s/* $tmp
done

# Some binaries can't be replaced by BusyBox applets
f=/bin/kmod
test -x $f || die "Not executable [$f]"
cp $f $tmp/sbin/modprobe
f=/usr/bin/find
test -x $f || die "Not executable [$f]"
cp $f $tmp/bin/find

test -n "$KUBERNETESD" || KUBERNETESD=$GOPATH/src/k8s.io/kubernetes/_output/bin
test -d "$KUBERNETESD" || die "Not a directory [$KUBERNETESD]"
cd "$KUBERNETESD"
test -x kubelet || die "No k8s binaries in [$KUBERNETESD]"
cp kubectl kubelet kube-proxy kube-controller-manager kube-scheduler \
	kube-apiserver $tmp/bin
# bin/kube-aggregator (removed in v1.12)
cd - > /dev/null

# Install CNI plugins;
d=$GOPATH/src/github.com/containernetworking/plugins/bin
if ! test -x $d/bridge; then
	cat >&2 <<"EOF"

CNI plugins does not exist in;
$GOPATH/src/github.com/containernetworking/plugins/bin

These must be built manually. Check the README.md.

EOF
	die "Not executable [$d/bridge]"
fi
mkdir -p $tmp/opt/cni/bin
for n in bridge host-local loopback; do
	test -x $d/$n || die "Not executable [$d/$n]"
	cp $d/$n $tmp/opt/cni/bin
done

# Install cri-o
f=$ARCHIVE/runc.amd64
test -x $f || die "Not executable [$f]"
mkdir -p $tmp/bin
cp $f $tmp/bin/runc
d=$GOPATH/src/github.com/kubernetes-incubator/cri-o/bin
for f in conmon crio crio-config pause; do
	test -x $d/$f || die "Not executable [$d/$f]"
	cp $d/$f $tmp/bin
done
d=$GOPATH/bin
for f in crictl service-watcher; do
	test -x $d/$f || die "Not executable [$d/$f]"
	cp $d/$f $tmp/bin
done
# (until we have some hooks...)
mkdir -p $tmp/usr/share/containers/oci/hooks.d

# Certificates are required for image pull
mkdir -p $tmp/etc/ssl/certs
cp /etc/ssl/certs/ca-certificates.crt $tmp/etc/ssl/certs/

n=$GOPATH/bin/coredns
test -x $n || n=$(dirname $XCLUSTER)/bin/coredns
test -x $n && cp $n $tmp/bin

jq=$(which jq)
test -n "$jq" && cp $jq $tmp/bin

# Install libraries
$XCLUSTER cplib --dest=$tmp $tmp/bin/*

cd $tmp
tar cf "$1" *
cd - > /dev/null
rm -rf $tmp
