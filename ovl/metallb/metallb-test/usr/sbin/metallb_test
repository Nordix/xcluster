#! /bin/sh
##
## xctest --
##
##   Perform tests of the "xcluster" platform.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
tmp=/tmp/${prg}_$$

die() {
    echo "ERROR: $*" >&2
    rm -rf $tmp
    exit 1
}
help() {
    grep '^##' $0 | cut -c3-
    rm -rf $tmp
    exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

##  tcase_nodes
cmd_tcase_nodes() {
	test_nodes
}
cmd_tcase_check_namespaces() {
	test_namespaces
}
cmd_tcase_check_coredns() {
	test_coredns
}

cmd_tcase_start_dual_stack() {
	tcase "Start metallb controller with dual-stack config"
	$kubectl apply -f /etc/kubernetes/metallb-config-dual-stack.yaml || tdie
	$kubectl apply -f /etc/kubernetes/metallb.yaml || tdie
	tex "npods metallb- 1" || tdie
}

cmd_tcase_start_mconnect_dual_stack() {
	tcase "Start mconnect with dual-stack config"
	$kubectl apply -f /etc/kubernetes/mconnect-dual-stack.yaml || tdie
	tex "npods mconnect-deployment- 4" || tdie
}

cmd_tcase_check_svc_dual_stack() {
	tcase "Check dual-stack services"
	local pat='.status.loadBalancer.ingress[0].ip'
	local ip=$($kubectl get svc mconnect-ipv4 -o json | jq -r $pat)
	test "$ip" = "10.0.0.0" || tdie "Unexpected ipv4 [$ip]"
	ip=$($kubectl get svc mconnect-ipv6 -o json | jq -r $pat)
	test "$ip" = "1000::" || tdie "Unexpected ipv6 [$ip]"
}

##  tcase_config [config]
cmd_tcase_config() {
	local cfg=default
	test -n "$1" && cfg=$1
	tcase "Set config [$cfg]"
	cfg=/etc/metallb/$cfg.conf
	test -r $cfg || tdie
	cp $cfg /tmp/config
	tex "kubectl create configmap config --from-file=/tmp/config 2>&1" || tdie
	return 0
}

##  tcase_start
cmd_tcase_start() {
	tcase "Start metallb"
	kubectl apply -f /etc/metallb/metallb.yaml || tdie
	sleep 2
	pushv 60 20 3
	local pod=metallb-controller-
	tex "kubectl get pods 2>&1 | ogrep -E '^$pod.*Running'" || tdie
	pod=metallb-speaker-
	tex "kubectl get pods | ogrep -E '^$pod.*Running'" || tdie
	tex "npods $pod 4" || tdie
	popv
	return 0
}

cmd_tcase_start_mconnect() {
	start_mconnect /etc/metallb/mconnect.yaml || tdie
	if test -n "$1"; then
		kubectl apply -f /etc/metallb/$1.yaml || tdie
	fi
	return 0
}

cmd_tcase_lbip() {
	tcase "LoadBalancerIP: $1 $2"
	tex "kubectl get svc $1 | ogrep $2"
}

check_peers() {
	mkdir -p $tmp
	local out=$tmp/out
	gobgp neighbor > $out
	cat $out
	local i
	for i in 1 2 3 4; do
		grep -E "$1$i .*Establ" $out || return 1
	done
	return 0
}
cmd_tcase_peers() {
	tcase "Check peers on router"
	tex "check_peers $1"
}

check_route() {
	mkdir -p $tmp
	local out=$tmp/out
	local opt
	echo $1 | grep -q : && opt=-6
	ip $opt route show $1 > $out
	cat $out
	local nhops=$(grep nexthop $out | wc -l)
	test $nhops -eq 4
}
cmd_tcase_route() {
	tcase "Check routes"
	pushv 30 15 2
	tex "check_route $1"
	popv
}

cmd_tcase_mconnect() {
	tcase "Mconnect to [$1]"
	tex "do_mconnect $1"
}

cmd_tcase_lroute() {
	tcase "Local route to [$1] on $(hostname)"
	if echo $1 | grep -q : ; then
		ip -6 ro add $1 via 1000::1:192.168.1.201
	else
		ip ro add $1 via 192.168.1.201
	fi
}

cmd_tcase_multiaddr() {
	tcase "Add multi address [$1]"
	if echo $1 | grep -q : ; then
		ip -6 addr add $1 dev lo
		ip -6 ro add local $1 dev lo
	else
		ip addr add $1 dev lo
	fi
	sysctl -w net.ipv4.ip_nonlocal_bind=1
	sysctl -w net.ipv6.ip_nonlocal_bind=1
}

cmd_tcase_tplocal() {
	tcase "Traffic policy local"
	mkdir -p $tmp
	local out=$tmp/out
	wget -q -O - http://$1:8080/healthz > $out || tdie
	cat $out
	if echo "$1" | grep -q : ; then
		grep ',\[1000::1:c0a8:1c9\]' $out || tdie
	else
		grep ",192.168.1.201" $out || tdie
	fi
}

cmd_tcase_multi_mconnect() {
	tcase "Multi-address mconnect from [$2] to $1"
	mkdir -p $tmp
	local out=$tmp/out
	if ! mconnect -address $1:5001 -nconn 100 -output json -srccidr $2 -seed 8 > $out; then
		cat $out | jq .
		return 1
	fi
	check_mconnect_result $out
	
}

cmd_tcase_configure_routes() {
	tcase "Configure routes when metallb-speaker does not support ipv6"
	ip -6 route add 1000:: \
		nexthop via 1000::1:192.168.1.1 \
		nexthop via 1000::1:192.168.1.2 \
		nexthop via 1000::1:192.168.1.3 \
		nexthop via 1000::1:192.168.1.4
	ip -6 route add 1000::2 \
		nexthop via 1000::1:192.168.1.1 \
		nexthop via 1000::1:192.168.1.2 \
		nexthop via 1000::1:192.168.1.3 \
		nexthop via 1000::1:192.168.1.4
}


. /etc/profile
. /usr/lib/xctest

# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 $hook || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
    if echo $1 | grep -q =; then
	o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
	v=$(echo "$1" | cut -d= -f2-)
	eval "$o=\"$v\""
    else
	o=$(echo "$1" | sed -e 's,-,_,g')
	eval "$o=yes"
    fi
    shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
