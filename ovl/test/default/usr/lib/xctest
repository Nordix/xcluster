#! /bin/sh
##
## Library functions for tests in "xcluster".
##
##  Perform selftest with;
##    selftest=yes $($XCLUSTER ovld test)/default/usr/lib/xctest
##
## On-cluster Functions
## --------------------
##

__timeout=10
__retries=10
__interval=1
begin=$(date +%s)
indent="  "
kubectl=kubectl

##  tlog message...
##    Logs to stderr with time stamp.
##
tlog() {
	echo "$indent$(date +%T) $*" >&2
}

##  tcase slogan...
##    Initiates a new test-case. The slogan is logged to stderr.
##
tcase() {
	tcstart=$(date +%s)
	local msg
	if test -n "$indent"; then
		msg="$(date +%T) ($(hostname)): TEST CASE: $*"
	else
		msg="$(date +%T) ($((tcstart-begin))): TEST CASE: $*"
	fi
	echo "$indent$msg"
	echo "$indent$msg" >&2
}

##  tdie [message...]
##    Terminates the test with an error code.
##
tdie() {
	now=$(date +%s)
	echo "$indent$(date +%T) ($((now-begin))): FAILED: $*" >&2
	rm -rf $tmp
	exit 1
}

##  tex command...
##    Ececute a function with retries and timeout. Ok (0) is returned
##    if succesful. Relevant settings in seconds;
##
##    __timeout (10) - Max time since start of the test case
##    __retries (10) - Max re-tries
##    __interval (1) - Interval between re-tries
##
tex() {
	eval $@ && return 0
	test $__retries -gt 0 || return 1

	# We shall do retries
	local tstart=$(date +%s)
	local now
	local retry=1
	while test $retry -le $__retries; do
		now=$(date +%s)
		if echo $__interval | grep -qE '^[0-9]+$'; then
			if test $((now+__interval-tstart)) -ge $__timeout; then
				tlog "Timeout ($__timeout)"
				return 2
			fi
		fi
		sleep $__interval
		echo "Retry ($retry/$__retries) [$1]"
		eval $@ && return 0
		retry=$((retry+1))
	done
	return 1
}

##  push variable value
##    Example; "push __timeout 20"
push() {
	eval stack$1="\$$1,\$stack$1"
	eval $1=$2
}
##  pop variable
##    Example; "pop __timeout"
##
pop() {
	local s=$(eval echo \$stack$1)
	eval $1=$(echo $s | cut -d, -f1)
	eval stack$1=$(echo $s | cut -d, -f2-)
}

##  pushv __timeout __retries __interval
##    Combo push. Example; "pushv 60 15 4"
pushv() {
	push __timeout $1
	push __retries $2
	push __interval $3
}
##  popv
##    Pop values pushed with "pushv"
##
popv() {
	pop __timeout
	pop __retries
	pop __interval
}

##  ogrep
##    Grep and send raw output to stdout (for logging).
##
ogrep() {
	mkdir -p $tmp
	cat > $tmp/out
	cat $tmp/out
	grep "$@" $tmp/out
}

##  mynode
##    Output the node number.
##
mynode() {
	hostname | cut -d- -f2 | sed -re 's,^0+,,'
}

##  npods <pattern> <expected-replicas>
##    Returns true if the expected number of pods are "Running".
##    Example; tex "npods mconnect-deployment- 4" || tdie
##
npods() {
	local n
	$kubectl get pods 2>&1 | ogrep 'No resources' && return 1
	n=$($kubectl get pods | grep -E "^$1.*Running" | wc -l)
	test $n -eq $2
}

##  lsimages
##    Output the images loaded in the system
##
lsimages() {
	crictl --runtime-endpoint=unix:///var/run/crio/crio.sock images
}

test_namespaces() {
	tcase "Check namespaces (and API-server availability)"
	pushv 60 30 2
	tex "$kubectl get namespace default 2>&1 | ogrep -E '^default *Active'" || tdie	
	tex "$kubectl get namespace kube-system 2>&1 | ogrep -E '^kube-system *Active'" || tdie	
	popv
}

##  test_coredns
##    Wait for the coredns pod to become "Running".
##
test_coredns() {
	tcase "Wait for the coredns pod"
	pushv 60 30 2
	tex "$kubectl get pods 2>&1 | ogrep -E '^coredns.*Running'" || tdie
	popv
}

##  test_nodes
##    Wait for the k8s nodes to become available through the API
##
test_nodes() {
	tcase "Wait for k8s nodes"
	pushv 30 30 1
	tex "$kubectl get nodes 2>&1 | ogrep vm-002" || tdie
	popv
}

##  get_pod <name>
##    Print the pod-id (used for instance for "kubectl exec"). Print "null"
##    if the pod can't be found.
##
get_pod() {
	test -n "$__podi" || __podi=0
	$kubectl -o json get pods -l "app=$1" | jq -r .items[$__podi].metadata.name
}

##  kubectl_exec <pod> <kubectl-exec options...>
##    Execute a command in a pod (container).
##
kubectl_exec() {
	local podid=$(get_pod $1)
	test "$podid" = "null" && tdie "Pod not found [$1]"
	shift
	echo "[$kubectl exec $podid $@]"
	$kubectl exec $podid $@
}

##  start_mconnect <manifest>
##    Starts "mconnect" and wait to 4 replicas become "Running".
##
start_mconnect() {
	tcase "Start mconnect"
	tex "$kubectl apply -f $1" || return 1
	sleep 1
	pushv 60 30 2
	tex "$kubectl get pods 2>&1 | grep -E '^mconnect.*Running'" || return 1
	tex "npods mconnect 4" || return 1
	popv
}

##  check_mconnect_result <file.json>
##    Check the result of an "mconnect". The number of connections must be 100.
##
check_mconnect_result() {
	cat $1 | jq .
	local v i=0
	for v in $(cat $1 | jq -r '.hosts|flatten[]'); do
		i=$((i + 1))
		test $v -le 36 || return 1
		test $v -ge 14 || return 1
	done
	test $i -eq 4
}

##  do_mconnect <address>
##    Execute an mconnect.
##
do_mconnect() {
	mkdir -p $tmp
	local out=$tmp/out
	if ! mconnect -address $1:5001 -nconn 100 -output json > $out; then
		cat $out | jq .
		return 1
	fi
	check_mconnect_result $out
}


## On-host Functions
## -----------------
## NOTE: Called from host (not within the cluster).
##

##  rsh <vm> command...
##    Executes a command on a vm.
##
rsh() {
	local vm=$1
	shift
	local sshopt="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
	if ip link show xcbr1 > /dev/null 2>&1; then
		ssh -q $sshopt root@192.168.0.$vm $@
	else
		ssh -q $sshopt -p $((12300+vm)) root@127.0.0.1 $@
	fi
}

##  check_vm [vms...]
##    NOTE: Called from host (not within the cluster).
##    Check connectivity with the vm's.
##
check_vm() {
	test -n "$__nvm" || __nvm=4
	local vms="$(seq -s' ' 1 $__nvm) 201 202"
	test -n "$1" && vms=$@
	for vm in $vms; do
		rsh $vm hostname || return 1
	done
	return 0
}

##  otc <vm> <tcase...>
##    Execute a test on a VM.
##    Prerequisite; "otcprog" set to the command on the cluster.
##
otc() {
	test -n "$otcprog" || otcprog=$(basename $dir)_test
	local tc vm
	vm=$1
	shift
	for tc in "$@"; do
		rsh $vm $otcprog tcase_$tc || tdie
	done
}

##  xcluster_start <ovls...>
##    Build a system (mkcdrom) and start xcluster.
##
##    VM start is verified. Use $EXPECTED_VMS for custome verification
##
xcluster_start() {
	if test -n "$SETUP"; then
		tcase "Build cluster SETUP=$SETUP [$BASEOVLS $@ $XOVLS test]"
		SETUP=$SETUP $XCLUSTER mkcdrom $BASEOVLS $@ $XOVLS test || tdie
	else
		tcase "Build cluster [$BASEOVLS $@ $XOVLS test]"
		$XCLUSTER mkcdrom $BASEOVLS $@ $XOVLS test || tdie
	fi

	tcase "Cluster start ($(basename $__image))"
    $XCLUSTER $start || tdie
    sleep 2
    tcase "VM connectivity"
    tex check_vm $EXPECTED_VMS || tdie
	xcluster_unprep
}

##  xcluster_prep <ipv4|ipv6|dual-stack|...>
##    Set SETUP and BASEOVLS variables for some pre-set configurations.
##
xcluster_prep() {
	case $1 in
		ipv4) ;;
		ipv6)
			SETUP=ipv6
			BASEOVLS=k8s-config
			;;
		dual-stack)
			BASEOVLS=k8s-dual-stack
			;;
		*)
		;;
	esac
}
xcluster_unprep() {
	unset SETUP BASEOVLS 
}

xcluster_stop() {
	test "$__no_stop" = "yes" && return 0
	tcase "Stop xcluster"
	$XCLUSTER stop
}

test -n "$XCTEST_HOOK" -a -r "$XCTEST_HOOK" && . "$XCTEST_HOOK"


if test "$selftest" = "yes"; then
	tmp=/tmp/xtest_selftest_$$

	tcase "Push/Pop"
	push __timeout 20
	test $__timeout -eq 20 || tdie
	push __timeout 30
	test $__timeout -eq 30 || tdie
	pop __timeout
	test $__timeout -eq 20 || tdie
	pop __timeout
	test $__timeout -eq 10 || tdie

	tcase "Pushv/Popv"
	pushv 22 33 44
	test $__timeout -eq 22 || tdie
	test $__retries -eq 33 || tdie
	test $__interval -eq 44 || tdie
	popv
	test $__timeout -eq 10 || tdie
	test $__retries -eq 10 || tdie
	test $__interval -eq 1 || tdie

	tcase "Retry"
	__retries=1
	tex false && tdie
	tcase "Timeout"
	__retries=3
	__timeout=3
	tex false && tdie

	tcase "ogrep"
	echo 'Kalle Kula' | ogrep -i 'kalle kula' || tdie
	rm -rf $tmp
	tlog SUCCESS
fi

test "$1" = "help" && grep '^##' $0 | cut -c3-
