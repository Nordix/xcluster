#! /bin/sh
##
## xctest --
##
##   Perform tests of the "xcluster" platform.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
tmp=/tmp/${prg}_$$

die() {
    echo "ERROR: $*" >&2
    rm -rf $tmp
    exit 1
}
help() {
    grep '^##' $0 | cut -c3-
    rm -rf $tmp
    exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

test -n "$__timeout" || __timeout=10
test -r /etc/TZ && export TZ=$(cat /etc/TZ)
begin=0

##   k8s [--ipv6]
##     Perform tests on a xcluster with Kubernetes. External
##     connectivity is required. That usually means;
##
##       # (a k8s hd image assumed)
##       xc mkcdrom externalip test; xc start
##
cmd_k8s() {
	tlog "On-cluster xcluster tests start on $(hostname)"
	begin=$(date +%s)

	__no_coredns=yes
	cmd_wait_for_k8s
	__no_coredns=''

	local tcases="test_images cmd_tcase_start_mconnect cmd_tcase_check_loadbalancererip test_coredns test_local_mconnect test_local_mconnect_udp test_start_alpine"
	local tc

	for tc in $tcases; do
		$tc
	done

	now=$(date +%s)
	tlog "On-cluster xcluster tests end. Elapsed time $((now-begin)) sec"
	return 0
}
##   wait_for_k8s
##
cmd_wait_for_k8s() {
	tlog "On-cluster $(hostname); Wait for Kubernetes"
	local begin=$(date +%s)
	mkdir -p $HOME/.kube
	cp /etc/kubernetes/kubeconfig $HOME/.kube/config

	test_nodes
	test "$__no_coredns" = "yes" && return 0
	test_coredns
	return 0
}
##   router_k8s
##     K8s test on a router
##
cmd_router_k8s() {
	tlog "On-router xcluster tests start on $(hostname); k8s"

	pushv 60 10 5
	test_external_mconnect
	popv
	test_external_mconnect_udp

	now=$(date +%s)
	tlog "On-router xcluster tests end. Elapsed time $((now-begin)) sec"
	return 0
}
##   k8s_kube_router
##     Kube-router test on k8s
##
cmd_k8s_kube_router() {
	tlog "On-cluster xcluster tests start on $(hostname); kube_router"
	begin=$(date +%s)
	local tcases="test_images cmd_tcase_start_mconnect cmd_tcase_check_loadbalancererip test_coredns test_local_mconnect test_local_mconnect_udp"
	mkdir -p $HOME/.kube
	cp /etc/kubernetes/kubeconfig $HOME/.kube/config
	local tc

	test_nodes
	test_peers

	begin=$(date +%s)
	for tc in $tcases; do
		$tc
	done

	now=$(date +%s)
	tlog "On-cluster xcluster tests end. Elapsed time $((now-begin)) sec"
	return 0
}
##   router_kube_router
##     Kube-router test on a router
##
cmd_router_kube_router() {
	tlog "On-router xcluster tests start on $(hostname); kube_router"
	begin=$(date +%s)

	pushv 60 10 5
	test_external_mconnect
	popv
	
	now=$(date +%s)
	tlog "On-router xcluster tests end. Elapsed time $((now-begin)) sec"
	return 0
}

test_images() {
	tcase "Check images"
	mkdir -p $tmp
	lsimages > $tmp/images || tdie
	local i
	for i in pause coredns mconnect; do
		grep $i $tmp/images || tdie "Image missing [$i]"
	done
}
cmd_tcase_start_mconnect() {
	start_mconnect /etc/kubernetes/mconnect.yaml || tdie
	tcase "Start mconnect"
	kubectl apply -f /etc/kubernetes/mconnect.yaml || tdie
	sleep 1
	pushv 60 30 2
	tex "kubectl get pods 2>&1 | grep -E '^mconnect.*Running'"
	tex "npods mconnect 4"
	popv
}

cmd_tcase_check_metallb() {
	tcase "Check metallb"
	pushv 30 15 2
	tex "kubectl get pods 2>&1 | grep -E '^metallb-controller.*Running'" || tdie
	tex "kubectl get pods 2>&1 | grep -E '^metallb-speaker.*Running'" || tdie
	popv
}

cmd_tcase_check_loadbalancererip() {
	tcase "Check LoadBalancerIP"
	local addr='10.0.0.2'
	test "$__ipv6" && addr='1000::2'
	tex "kubectl get svc mconnect 2>&1 | grep $addr"
}

local_mconnect() {
	tcase "Local mconnect $1"
	mkdir -p $tmp
	mconnect -address mconnect$1.default.svc.xcluster:5001 -nconn 100 $1 \
		2>&1 | tee $tmp/mconnect.log || return 1
	cat $tmp/mconnect.log
	grep -q 'Failed connects; 0$' $tmp/mconnect.log || return 1
	grep -q 'Failed reads; 0$' $tmp/mconnect.log || return 1
	return 0
}
external_mconnect() {
	tcase "External mconnect $1"
	mkdir -p $tmp
	local t
	if test "$__ipv6" = "yes"; then
		mconnect -address [1000::2]:5001 -nconn 100 $1 \
			2>&1 | tee $tmp/mconnect.log || return 1
		cat $tmp/mconnect.log
		t=$(grep -E '^mconnect-deployment-' $tmp/mconnect.log | wc -l)
		test $t -eq 4 || return 1
	else
		mconnect -address 10.0.0.2:5001 -nconn 100 $1 \
			2>&1 | tee $tmp/mconnect.log || return 1
		cat $tmp/mconnect.log
		t=$(grep -E '^mconnect-deployment-' $tmp/mconnect.log | wc -l)
		test $t -eq 4 || return 1
	fi
	grep -q 'Failed connects; 0$' $tmp/mconnect.log || return 1
	grep -q 'Failed reads; 0$' $tmp/mconnect.log || return 1
	return 0
}
test_local_mconnect() {
	pushv 30 15 2
	tex local_mconnect || tdie
	popv
}
test_external_mconnect() {
	tex external_mconnect || tdie
}
test_local_mconnect_udp() {
	pushv 30 15 2
	tex "local_mconnect -udp" || tdie
	popv
}
test_external_mconnect_udp() {
	tex "external_mconnect -udp" || tdie
}
test_start_alpine() {
	tcase "Start alpine"
	kubectl apply -f /etc/kubernetes/alpine.yaml || tdie
	sleep 5
	pushv 60 10 5
	tex "kubectl get pods 2>&1 | grep -E '^alpine.*Running'" || tdie
	popv
}
test_peers() {
	tcase "Kube-router peers"
	pushv 60 30 2
	tex check_peers
	popv
}
check_peers() {
	mkdir -p $tmp
	/bin/gobgp neighbor > $tmp/neighbor
	local i
	for i in 1 2 3 4 201 202; do
		test $i -eq $(mynode) && continue
		grep -E "^192.168.1.$i.*Establ" $tmp/neighbor || return 1
	done
	return 0
}

. $dir/../lib/$prg

# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 $hook || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
    if echo $1 | grep -q =; then
	o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
	v=$(echo "$1" | cut -d= -f2-)
	eval "$o=\"$v\""
    else
	o=$(echo "$1" | sed -e 's,-,_,g')
	eval "$o=yes"
    fi
    shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
