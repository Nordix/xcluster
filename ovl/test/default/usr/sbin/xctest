#! /bin/sh
##
## xctest --
##
##   Perform tests of the "xcluster" platform.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
tmp=/tmp/${prg}_$$

die() {
    echo "ERROR: $*" >&2
    rm -rf $tmp
    exit 1
}
help() {
    grep '^##' $0 | cut -c3-
    rm -rf $tmp
    exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

test -n "$__timeout" || __timeout=10
test -r /etc/TZ && export TZ=$(cat /etc/TZ)
begin=0

##   k8s [--ipv6]
##     Perform tests on a xcluster with Kubernetes. External
##     connectivity is required. That usually means;
##
##       # (a k8s hd image assumed)
##       xc mkcdrom externalip test; xc start
##
cmd_k8s() {
	tlog "On-cluster xcluster tests start on $(hostname)"
	begin=$(date +%s)

	cmd_wait_for_k8s

	local tcases="test_images cmd_tcase_start_mconnect cmd_tcase_check_loadbalancererip test_local_mconnect test_local_mconnect_udp test_start_alpine"
	local tc

	for tc in $tcases; do
		$tc
	done

	now=$(date +%s)
	tlog "On-cluster xcluster tests end. Elapsed time $((now-begin)) sec"
	return 0
}
##   wait_for_k8s
##
cmd_wait_for_k8s() {
	tlog "On-cluster $(hostname); Wait for Kubernetes"
	local begin=$(date +%s)
	mkdir -p $HOME/.kube
	cp /etc/kubernetes/kubeconfig $HOME/.kube/config

	test_nodes
	test_coredns

	now=$(date +%s)
	tlog "Kubernetes ready. Elapsed time $((now-begin)) sec"
	return 0
}
##   router_k8s
##     K8s test on a router
##
cmd_router_k8s() {
	tlog "On-router xcluster tests start on $(hostname); k8s"
	begin=$(date +%s)
	__timeout=10

	test_external_mconnect
	test_external_mconnect_udp

	now=$(date +%s)
	tlog "On-router xcluster tests end. Elapsed time $((now-begin)) sec"
	return 0
}
##   k8s_kube_router
##     Kube-router test on k8s
##
cmd_k8s_kube_router() {
	tlog "On-cluster xcluster tests start on $(hostname); kube_router"
	begin=$(date +%s)
	local tcases="test_images cmd_tcase_start_mconnect cmd_tcase_check_loadbalancererip test_local_mconnect test_local_mconnect_udp"
	mkdir -p $HOME/.kube
	cp /etc/kubernetes/kubeconfig $HOME/.kube/config
	local tc

	__timeout=10
	test_nodes
	__timeout=60
	test_coredns
	test_peers
	__timeout=10

	begin=$(date +%s)
	for tc in $tcases; do
		$tc
	done

	now=$(date +%s)
	tlog "On-cluster xcluster tests end. Elapsed time $((now-begin)) sec"
	return 0
}
##   router_kube_router
##     Kube-router test on a router
##
cmd_router_kube_router() {
	tlog "On-router xcluster tests start on $(hostname); kube_router"
	begin=$(date +%s)

	__timeout=60
	__retries=10
	test_external_mconnect
	__retries=''
	__timeout=10
	
	now=$(date +%s)
	tlog "On-router xcluster tests end. Elapsed time $((now-begin)) sec"
	return 0
}

tlog() {
	echo "  $(date +%T) $*" >&2
}
tcase() {
	now=$(date +%s)
	test $begin -eq 0 && begin=$now
	local msg="$(date +%T) ($((now-begin))): TEST CASE: $*"
	echo "  $msg"
	echo "  $msg" >&2
}
tdie() {
	now=$(date +%s)
	test $begin -eq 0 && begin=$now
	echo "  $(date +%T) ($((now-begin))): FAILED: $*" >&2
	rm -rf $tmp
	exit 1
}
test_nodes() {
	tcase "Wait for k8s nodes"
	sleep 5
	start=$(date +%s)
	now=$start
	while ! kubectl get nodes 2>&1 | grep vm-001; do
		test $((now-start)) -ge $__timeout && tdie Timeout
		sleep 1
		now=$(date +%s)
	done
}
test_coredns() {
	tcase "Wait for the coredns pod"
	sleep 10
	start=$(date +%s)
	now=$start
	while ! kubectl get pods 2>&1 | grep -E '^coredns.*Running'; do
		test $((now-start)) -ge $__timeout && tdie Timeout
		sleep 1
		now=$(date +%s)
	done
}
test_images() {
	tcase "Check images"
	mkdir -p $tmp
	crictl --runtime-endpoint=unix:///var/run/crio/crio.sock images \
		> $tmp/images || tdie
	local i
	for i in pause coredns mconnect; do
		grep $i $tmp/images || tdie "Image missing [$i]"
	done
}
cmd_tcase_start_mconnect() {
	tcase "Start mconnect"
	kubectl apply -f /etc/kubernetes/mconnect.yaml || tdie

	sleep 1
	start=$(date +%s)
	now=$start
	while ! kubectl get pods 2>&1 | grep -E '^mconnect.*Running'; do
		test $((now-start)) -ge $__timeout && tdie Timeout
		sleep 1
		now=$(date +%s)
	done
}

cmd_tcase_check_metallb() {
	tcase "Check metallb"
	start=$(date +%s)
	now=$start
	while ! kubectl get pods 2>&1 | grep -E '^metallb-controller.*Running'; do
		kubectl get pods 2>&1 grep metallb
		test $((now-start)) -ge $__timeout && tdie Timeout
		sleep 1
		now=$(date +%s)
	done
	while ! kubectl get pods 2>&1 | grep -E '^metallb-speaker.*Running'; do
		test $((now-start)) -ge $__timeout && tdie Timeout
		sleep 1
		now=$(date +%s)
	done
}

cmd_tcase_check_loadbalancererip() {
	tcase "Check LoadBalancerIP"
	local addr='10.0.0.2'
	test "$__ipv6" && addr='1000::2'
	start=$(date +%s)
	now=$start
	while ! kubectl get svc mconnect 2>&1 | grep $addr; do
		kubectl get svc mconnect 2>&1
		test $((now-start)) -ge $__timeout && tdie Timeout
		sleep 1
		now=$(date +%s)
	done
}

local_mconnect() {
	tcase "Local mconnect $1"
	mkdir -p $tmp
	mconnect -address mconnect$1.default.svc.xcluster:5001 -nconn 100 $1 \
		2>&1 | tee $tmp/mconnect.log || tdie
	cat $tmp/mconnect.log
	grep -q 'Failed connects; 0$' $tmp/mconnect.log || tdie
	grep -q 'Failed reads; 0$' $tmp/mconnect.log || tdie
}
external_mconnect() {
	tcase "External mconnect $1"
	mkdir -p $tmp
	local t
	if test "$__ipv6" = "yes"; then
		mconnect -address [1000::2]:5001 -nconn 100 $1 \
			2>&1 | tee $tmp/mconnect.log || return 1
		cat $tmp/mconnect.log
		t=$(grep -E '^mconnect-deployment-' $tmp/mconnect.log | wc -l)
		test $t -eq 4 || return 1
	else
		mconnect -address 10.0.0.2:5001 -nconn 100 $1 \
			2>&1 | tee $tmp/mconnect.log || return 1
		cat $tmp/mconnect.log
		t=$(grep -E '^mconnect-deployment-' $tmp/mconnect.log | wc -l)
		test $t -eq 4 || return 1
	fi
	grep -q 'Failed connects; 0$' $tmp/mconnect.log || return 1
	grep -q 'Failed reads; 0$' $tmp/mconnect.log || return 1
	return 0
}
test_local_mconnect() {
	local_mconnect
}
test_external_mconnect() {
	if test -n "$__retries"; then
		local start=$(date +%s)
		local now
		while test $__retries -gt 0; do
			now=$(date +%s)
			test $((now-start)) -ge $__timeout && tdie Timeout
			external_mconnect && return 0
			__retries=$((__retries - 1))
			sleep 5
		done
	fi
	external_mconnect || tdie
}
test_local_mconnect_udp() {
	local_mconnect -udp || tdie
}
test_external_mconnect_udp() {
	external_mconnect -udp
}
test_start_alpine() {
	tcase "Start alpine"
	kubectl apply -f /etc/kubernetes/alpine.yaml || tdie
	sleep 12
	start=$(date +%s)
	now=$start
	while ! kubectl get pods 2>&1 | grep -E '^alpine.*Running'; do
		test $((now-start)) -ge $__timeout && tdie Timeout
		sleep 1
		now=$(date +%s)
	done
}
test_peers() {
	tcase "Kube-router peers"
	start=$(date +%s)
	now=$start
	while ! check_peers; do
		test $((now-start)) -ge $__timeout && tdie Timeout
		sleep 1
		now=$(date +%s)
	done
}
check_peers() {
	mkdir -p $tmp
	/bin/gobgp neighbor > $tmp/neighbor
	local i
	for i in 1 2 3 4 201 202; do
		test $i -eq $(mynode) && continue
		grep -E "^192.168.1.$i.*Establ" $tmp/neighbor || return 1
	done
	return 0
}
mynode() {
	hostname | cut -d- -f2 | sed -re 's,^0+,,'
}

# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 $hook || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
    if echo $1 | grep -q =; then
	o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
	v=$(echo "$1" | cut -d= -f2-)
	eval "$o=\"$v\""
    else
	o=$(echo "$1" | sed -e 's,-,_,g')
	eval "$o=yes"
    fi
    shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
